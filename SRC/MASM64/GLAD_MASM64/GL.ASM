; *
; * Loader generated by glad 2.0.6 on Tue Jun  4 20:54:54 2024
; *
; * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
; *
; * Generator: C/C++
; * Specification: gl
; * Extensions: 0
; *
; * APIs:
; *  - gl:core=3.3
; *
; * Options:
; *  - ALIAS = False
; *  - DEBUG = False
; *  - HEADER_ONLY = True
; *  - LOADER = False
; *  - MX = False
; *  - ON_DEMAND = False
; *
; * Commandline:
; *    --api='gl:core=3.3' --extensions='' c --header-only
; *
; * Online:
; *    http://glad.sh/#api=gl%3Acore%3D3.3&extensions=&generator=c&options=HEADER_ONLY
; *
; *
; *************************************************************************************
; * Translated from C Into MASM64 by Raki47, Filip Rancic
; *************************************************************************************
; * So far I have translated up to line 917 of this file, I have fully removed Khronos 
; * from GLAD for far easier translation (Lets pray this doesn't break It).
; * This translation will simplify using glad for MASM64 as well as remove a lot of
; * header file related bloat when accessing It's functions from out of the renderer 
; * static library
; *
; * It Is likely I made a mistake around line 1620 which resulted In losing a lot 
; * function codes and If I did I can't reverse It

.data
; Assuming x is stored in a register or memory location

; Use RAX to avoid compiler warnings about unused variable
mov rax, x  ; Move the value of x to RAX (which effectively uses x)

; Define GLAD_API_CALL for MASM64
IFDEF GLAD_API_CALL
  GLAD_API_CALL equ extern
ENDIF

; Define GLAD_API_PTR for MASM64
IFDEF APIENTRY
  GLAD_API_PTR equ APIENTRY
ELSEIF GLAD_PLATFORM_WIN32
  GLAD_API_PTR equ __stdcall
ELSE
  GLAD_API_PTR equ
ENDIF

IFDEF GLAPI
  GLAPI equ GLAD_API_CALL
ENDIF

IFDEF GLAPIENTRY
  GLAPIENTRY equ GLAD_API_PTR
ENDIF

; Define GLAD_MAKE_VERSION macro
GLAD_MAKE_VERSION MACRO major, minor
    mov eax, major         ; Move major to EAX register
    imul eax, eax, 10000   ; Multiply EAX by 10000
    add eax, minor         ; Add minor to EAX
ENDM

; Define GLAD_VERSION_MAJOR macro
GLAD_VERSION_MAJOR MACRO version
    mov eax, version       ; Move version to EAX register
    xor edx, edx           ; Clear EDX for division
    mov ecx, 10000         ; Move 10000 to ECX for division
    div ecx                ; Divide EAX by ECX (10000)
ENDM

; Define GLAD_VERSION_MINOR macro
GLAD_VERSION_MINOR MACRO version
    mov eax, version       ; Move version to EAX register
    xor edx, edx           ; Clear EDX for modulo
    mov ecx, 10000         ; Move 10000 to ECX for modulo
    div ecx                ; Divide EAX by ECX (10000), remainder in EDX
ENDM

; Define GLADapiproc type as a pointer to a function returning void
GLADapiproc typedef ptr void

; Define GLADloadfunc type as a pointer to a function taking a pointer to const char and returning a pointer to GLADapiproc function
GLADloadfunc typedef ptr ptr GLADapiproc
; Define GLADuserptrloadfunc type as a pointer to a function taking a pointer to void and a pointer to const char and returning a pointer to GLADapiproc function
GLADuserptrloadfunc typedef ptr ptr GLADapiproc

; Define GLADprecallback type as a pointer to a function taking a pointer to const char, a pointer to GLADapiproc, an int, and variadic arguments returning void
GLADprecallback typedef ptr ptr void
; Define GLADpostcallback type as a pointer to a function taking a pointer to void, a pointer to const char, a pointer to GLADapiproc, an int, and variadic arguments returning void
GLADpostcallback typedef ptr ptr void

GL_ACTIVE_ATTRIBUTES equ 0x8B89
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH equ 0x8B8A
GL_ACTIVE_TEXTURE equ 0x84E0
GL_ACTIVE_UNIFORMS equ 0x8B86
GL_ACTIVE_UNIFORM_BLOCKS equ 0x8A36
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH equ 0x8A35
GL_ACTIVE_UNIFORM_MAX_LENGTH equ 0x8B87
GL_ALIASED_LINE_WIDTH_RANGE equ 0x846E
GL_ALPHA equ 0x1906
GL_ALREADY_SIGNALED equ 0x911A
GL_ALWAYS equ 0x0207
GL_AND equ 0x1501
GL_AND_INVERTED equ 0x1504
GL_AND_REVERSE equ 0x1502
GL_ANY_SAMPLES_PASSED equ 0x8C2F
GL_ARRAY_BUFFER equ 0x8892
GL_ARRAY_BUFFER_BINDING equ 0x8894
GL_ATTACHED_SHADERS equ 0x8B85
GL_BACK equ 0x0405
GL_BACK_LEFT equ 0x0402
GL_BACK_RIGHT equ 0x0403
GL_BGR equ 0x80E0
GL_BGRA equ 0x80E1
GL_BGRA_INTEGER equ 0x8D9B
GL_BGR_INTEGER equ 0x8D9A
GL_BLEND equ 0x0BE2
GL_BLEND_COLOR equ 0x8005
GL_BLEND_DST equ 0x0BE0
GL_BLEND_DST_ALPHA equ 0x80CA
GL_BLEND_DST_RGB equ 0x80C8
GL_BLEND_EQUATION equ 0x8009
GL_BLEND_EQUATION_ALPHA equ 0x883D
GL_BLEND_EQUATION_RGB equ 0x8009
GL_BLEND_SRC equ 0x0BE1
GL_BLEND_SRC_ALPHA equ 0x80CB
GL_BLEND_SRC_RGB equ 0x80C9
GL_BLUE equ 0x1905
GL_BLUE_INTEGER equ 0x8D96
GL_BOOL equ 0x8B56
GL_BOOL_VEC2 equ 0x8B57
GL_BOOL_VEC3 equ 0x8B58
GL_BOOL_VEC4 equ 0x8B59
GL_BUFFER_ACCESS equ 0x88BB
GL_BUFFER_ACCESS_FLAGS equ 0x911F
GL_BUFFER_MAPPED equ 0x88BC
GL_BUFFER_MAP_LENGTH equ 0x9120
GL_BUFFER_MAP_OFFSET equ 0x9121
GL_BUFFER_MAP_POINTER equ 0x88BD
GL_BUFFER_SIZE equ 0x8764
GL_BUFFER_USAGE equ 0x8765
GL_BYTE equ 0x1400
GL_CCW equ 0x0901
GL_CLAMP_READ_COLOR equ 0x891C
GL_CLAMP_TO_BORDER equ 0x812D
GL_CLAMP_TO_EDGE equ 0x812F
GL_CLEAR equ 0x1500
GL_CLIP_DISTANCE0 equ 0x3000
GL_CLIP_DISTANCE1 equ 0x3001
GL_CLIP_DISTANCE2 equ 0x3002
GL_CLIP_DISTANCE3 equ 0x3003
GL_CLIP_DISTANCE4 equ 0x3004
GL_CLIP_DISTANCE5 equ 0x3005
GL_CLIP_DISTANCE6 equ 0x3006
GL_CLIP_DISTANCE7 equ 0x3007
GL_COLOR equ 0x1800
GL_COLOR_ATTACHMENT0 equ 0x8CE0
GL_COLOR_ATTACHMENT1 equ 0x8CE1
GL_COLOR_ATTACHMENT10 equ 0x8CEA
GL_COLOR_ATTACHMENT11 equ 0x8CEB
GL_COLOR_ATTACHMENT12 equ 0x8CEC
GL_COLOR_ATTACHMENT13 equ 0x8CED
GL_COLOR_ATTACHMENT14 equ 0x8CEE
GL_COLOR_ATTACHMENT15 equ 0x8CEF
GL_COLOR_ATTACHMENT16 equ 0x8CF0
GL_COLOR_ATTACHMENT17 equ 0x8CF1
GL_COLOR_ATTACHMENT18 equ 0x8CF2
GL_COLOR_ATTACHMENT19 equ 0x8CF3
GL_COLOR_ATTACHMENT2 equ 0x8CE2
GL_COLOR_ATTACHMENT20 equ 0x8CF4
GL_COLOR_ATTACHMENT21 equ 0x8CF5
GL_COLOR_ATTACHMENT22 equ 0x8CF6
GL_COLOR_ATTACHMENT23 equ 0x8CF7
GL_COLOR_ATTACHMENT24 equ 0x8CF8
GL_COLOR_ATTACHMENT25 equ 0x8CF9
GL_COLOR_ATTACHMENT26 equ 0x8CFA
GL_COLOR_ATTACHMENT27 equ 0x8CFB
GL_COLOR_ATTACHMENT28 equ 0x8CFC
GL_COLOR_ATTACHMENT29 equ 0x8CFD
GL_COLOR_ATTACHMENT3 equ 0x8CE3
GL_COLOR_ATTACHMENT30 equ 0x8CFE
GL_COLOR_ATTACHMENT31 equ 0x8CFF
GL_COLOR_ATTACHMENT4 equ 0x8CE4
GL_COLOR_ATTACHMENT5 equ 0x8CE5
GL_COLOR_ATTACHMENT6 equ 0x8CE6
GL_COLOR_ATTACHMENT7 equ 0x8CE7
GL_COLOR_ATTACHMENT8 equ 0x8CE8
GL_COLOR_ATTACHMENT9 equ 0x8CE9
GL_COLOR_BUFFER_BIT equ 0x00004000
GL_COLOR_CLEAR_VALUE equ 0x0C22
GL_COLOR_LOGIC_OP equ 0x0BF2
GL_COLOR_WRITEMASK equ 0x0C23
GL_COMPARE_REF_TO_TEXTURE equ 0x884E
GL_COMPILE_STATUS equ 0x8B81
GL_COMPRESSED_RED equ 0x8225
GL_COMPRESSED_RED_RGTC1 equ 0x8DBB
GL_COMPRESSED_RG equ 0x8226
GL_COMPRESSED_RGB equ 0x84ED
GL_COMPRESSED_RGBA equ 0x84EE
GL_COMPRESSED_RG_RGTC2 equ 0x8DBD
GL_COMPRESSED_SIGNED_RED_RGTC1 equ 0x8DBC
GL_COMPRESSED_SIGNED_RG_RGTC2 equ 0x8DBE
GL_COMPRESSED_SRGB equ 0x8C48
GL_COMPRESSED_SRGB_ALPHA equ 0x8C49
GL_COMPRESSED_TEXTURE_FORMATS equ 0x86A3
GL_CONDITION_SATISFIED equ 0x911C
GL_CONSTANT_ALPHA equ 0x8003
GL_CONSTANT_COLOR equ 0x8001
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT equ 0x00000002
GL_CONTEXT_CORE_PROFILE_BIT equ 0x00000001
GL_CONTEXT_FLAGS equ 0x821E
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT equ 0x00000001
GL_CONTEXT_PROFILE_MASK equ 0x9126
GL_COPY equ 0x1503
GL_COPY_INVERTED equ 0x150C
GL_COPY_READ_BUFFER equ 0x8F36
GL_COPY_WRITE_BUFFER equ 0x8F37
GL_CULL_FACE equ 0x0B44
GL_CULL_FACE_MODE equ 0x0B45
GL_CURRENT_PROGRAM equ 0x8B8D
GL_CURRENT_QUERY equ 0x8865
GL_CURRENT_VERTEX_ATTRIB equ 0x8626
GL_CW equ 0x0900
GL_DECR equ 0x1E03
GL_DECR_WRAP equ 0x8508
GL_DELETE_STATUS equ 0x8B80
GL_DEPTH equ 0x1801
GL_DEPTH24_STENCIL8 equ 0x88F0
GL_DEPTH32F_STENCIL8 equ 0x8CAD
GL_DEPTH_ATTACHMENT equ 0x8D00
GL_DEPTH_BUFFER_BIT equ 0x00000100
GL_DEPTH_CLAMP equ 0x864F
GL_DEPTH_CLEAR_VALUE equ 0x0B73
GL_DEPTH_COMPONENT equ 0x1902
GL_DEPTH_COMPONENT16 equ 0x81A5
GL_DEPTH_COMPONENT24 equ 0x81A6
GL_DEPTH_COMPONENT32 equ 0x81A7
GL_DEPTH_COMPONENT32F equ 0x8CAC
GL_DEPTH_FUNC equ 0x0B74
GL_DEPTH_RANGE equ 0x0B70
GL_DEPTH_STENCIL equ 0x84F9
GL_DEPTH_STENCIL_ATTACHMENT equ 0x821A
GL_DEPTH_TEST equ 0x0B71
GL_DEPTH_WRITEMASK equ 0x0B72
GL_DITHER equ 0x0BD0
GL_DONT_CARE equ 0x1100
GL_DOUBLE equ 0x140A
GL_DOUBLEBUFFER equ 0x0C32
GL_DRAW_BUFFER equ 0x0C01
GL_DRAW_BUFFER0 equ 0x8825
GL_DRAW_BUFFER1 equ 0x8826
GL_DRAW_BUFFER10 equ 0x882F
GL_DRAW_BUFFER11 equ 0x8830
GL_DRAW_BUFFER12 equ 0x8831
GL_DRAW_BUFFER13 equ 0x8832
GL_DRAW_BUFFER14 equ 0x8833
GL_DRAW_BUFFER15 equ 0x8834
GL_DRAW_BUFFER2 equ 0x8827
GL_DRAW_BUFFER3 equ 0x8828
GL_DRAW_BUFFER4 equ 0x8829
GL_DRAW_BUFFER5 equ 0x882A
GL_DRAW_BUFFER6 equ 0x882B
GL_DRAW_BUFFER7 equ 0x882C
GL_DRAW_BUFFER8 equ 0x882D
GL_DRAW_BUFFER9 equ 0x882E
GL_DRAW_FRAMEBUFFER equ 0x8CA9
GL_DRAW_FRAMEBUFFER_BINDING equ 0x8CA6
GL_DST_ALPHA equ 0x0304
GL_DST_COLOR equ 0x0306
GL_DYNAMIC_COPY equ 0x88EA
GL_DYNAMIC_DRAW equ 0x88E8
GL_DYNAMIC_READ equ 0x88E9
GL_ELEMENT_ARRAY_BUFFER equ 0x8893
GL_ELEMENT_ARRAY_BUFFER_BINDING equ 0x8895
GL_EQUAL equ 0x0202
GL_EQUIV equ 0x1509
GL_EXTENSIONS equ 0x1F03
GL_FALSE equ 0
GL_FASTEST equ 0x1101
GL_FILL equ 0x1B02
GL_FIRST_VERTEX_CONVENTION equ 0x8E4D
GL_FIXED_ONLY equ 0x891D
GL_FLOAT equ 0x1406
GL_FLOAT_32_UNSIGNED_INT_24_8_REV equ 0x8DAD
GL_FLOAT_MAT2 equ 0x8B5A
GL_FLOAT_MAT2x3 equ 0x8B65
GL_FLOAT_MAT2x4 equ 0x8B66
GL_FLOAT_MAT3 equ 0x8B5B
GL_FLOAT_MAT3x2 equ 0x8B67
GL_FLOAT_MAT3x4 equ 0x8B68
GL_FLOAT_MAT4 equ 0x8B5C
GL_FLOAT_MAT4x2 equ 0x8B69
GL_FLOAT_MAT4x3 equ 0x8B6A
GL_FLOAT_VEC2 equ 0x8B50
GL_FLOAT_VEC3 equ 0x8B51
GL_FLOAT_VEC4 equ 0x8B52
GL_FRAGMENT_SHADER equ 0x8B30
GL_FRAGMENT_SHADER_DERIVATIVE_HINT equ 0x8B8B
GL_FRAMEBUFFER equ 0x8D40
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE equ 0x8215
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE equ 0x8214
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING equ 0x8210
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE equ 0x8211
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE equ 0x8216
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE equ 0x8213
GL_FRAMEBUFFER_ATTACHMENT_LAYERED equ 0x8DA7
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME equ 0x8CD1
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE equ 0x8CD0
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE equ 0x8212
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE equ 0x8217
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE equ 0x8CD3
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER equ 0x8CD4
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL equ 0x8CD2
GL_FRAMEBUFFER_BINDING equ 0x8CA6
GL_FRAMEBUFFER_COMPLETE equ 0x8CD5
GL_FRAMEBUFFER_DEFAULT equ 0x8218
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT equ 0x8CD6
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER equ 0x8CDB
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS equ 0x8DA8
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT equ 0x8CD7
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE equ 0x8D56
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER equ 0x8CDC
GL_FRAMEBUFFER_SRGB equ 0x8DB9
GL_FRAMEBUFFER_UNDEFINED equ 0x8219
GL_FRAMEBUFFER_UNSUPPORTED equ 0x8CDD
GL_FRONT equ 0x0404
GL_FRONT_AND_BACK equ 0x0408
GL_FRONT_FACE equ 0x0B46
GL_FRONT_LEFT equ 0x0400
GL_FRONT_RIGHT equ 0x0401
GL_FUNC_ADD equ 0x8006
GL_FUNC_REVERSE_SUBTRACT equ 0x800B
GL_FUNC_SUBTRACT equ 0x800A
GL_GEOMETRY_INPUT_TYPE equ 0x8917
GL_GEOMETRY_OUTPUT_TYPE equ 0x8918
GL_GEOMETRY_SHADER equ 0x8DD9
GL_GEOMETRY_VERTICES_OUT equ 0x8916
GL_GEQUAL equ 0x0206
GL_GREATER equ 0x0204
GL_GREEN equ 0x1904
GL_GREEN_INTEGER equ 0x8D95
GL_HALF_FLOAT equ 0x140B
GL_INCR equ 0x1E02
GL_INCR_WRAP equ 0x8507
GL_INFO_LOG_LENGTH equ 0x8B84
GL_INT equ 0x1404
GL_INTERLEAVED_ATTRIBS equ 0x8C8C
GL_INT_2_10_10_10_REV equ 0x8D9F
GL_INT_SAMPLER_1D equ 0x8DC9
GL_INT_SAMPLER_1D_ARRAY equ 0x8DCE
GL_INT_SAMPLER_2D equ 0x8DCA
GL_INT_SAMPLER_2D_ARRAY equ 0x8DCF
GL_INT_SAMPLER_2D_MULTISAMPLE equ 0x9109
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY equ 0x910C
GL_INT_SAMPLER_2D_RECT equ 0x8DCD
GL_INT_SAMPLER_3D equ 0x8DCB
GL_INT_SAMPLER_BUFFER equ 0x8DD0
GL_INT_SAMPLER_CUBE equ 0x8DCC
GL_INT_VEC2 equ 0x8B53
GL_INT_VEC3 equ 0x8B54
GL_INT_VEC4 equ 0x8B55
GL_INVALID_ENUM equ 0x0500
GL_INVALID_FRAMEBUFFER_OPERATION equ 0x0506
GL_INVALID_INDEX equ 0xFFFFFFFF
GL_INVALID_OPERATION equ 0x0502
GL_INVALID_VALUE equ 0x0501
GL_INVERT equ 0x150A
GL_KEEP equ 0x1E00
GL_LAST_VERTEX_CONVENTION equ 0x8E4E
GL_LEFT equ 0x0406
GL_LEQUAL equ 0x0203
GL_LESS equ 0x0201
GL_LINE equ 0x1B01
GL_LINEAR equ 0x2601
GL_LINEAR_MIPMAP_LINEAR equ 0x2703
GL_LINEAR_MIPMAP_NEAREST equ 0x2701
GL_LINES equ 0x0001
GL_LINES_ADJACENCY equ 0x000A
GL_LINE_LOOP equ 0x0002
GL_LINE_SMOOTH equ 0x0B20
GL_LINE_SMOOTH_HINT equ 0x0C52
GL_LINE_STRIP equ 0x0003
GL_LINE_STRIP_ADJACENCY equ 0x000B
GL_LINE_WIDTH equ 0x0B21
GL_LINE_WIDTH_GRANULARITY equ 0x0B23
GL_LINE_WIDTH_RANGE equ 0x0B22
GL_LINK_STATUS equ 0x8B82
GL_LOGIC_OP_MODE equ 0x0BF0
GL_LOWER_LEFT equ 0x8CA1
GL_MAJOR_VERSION equ 0x821B
GL_MAP_FLUSH_EXPLICIT_BIT equ 0x0010
GL_MAP_INVALIDATE_BUFFER_BIT equ 0x0008
GL_MAP_INVALIDATE_RANGE_BIT equ 0x0004
GL_MAP_READ_BIT equ 0x0001
GL_MAP_UNSYNCHRONIZED_BIT equ 0x0020
GL_MAP_WRITE_BIT equ 0x0002
GL_MAX equ 0x8008
GL_MAX_3D_TEXTURE_SIZE equ 0x8073
GL_MAX_ARRAY_TEXTURE_LAYERS equ 0x88FF
GL_MAX_CLIP_DISTANCES equ 0x0D32
GL_MAX_COLOR_ATTACHMENTS equ 0x8CDF
GL_MAX_COLOR_TEXTURE_SAMPLES equ 0x910E
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS equ 0x8A33
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS equ 0x8A32
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS equ 0x8B4D
GL_MAX_COMBINED_UNIFORM_BLOCKS equ 0x8A2E
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS equ 0x8A31
GL_MAX_CUBE_MAP_TEXTURE_SIZE equ 0x851C
GL_MAX_DEPTH_TEXTURE_SAMPLES equ 0x910F
GL_MAX_DRAW_BUFFERS equ 0x8824
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS equ 0x88FC
GL_MAX_ELEMENTS_INDICES equ 0x80E9
GL_MAX_ELEMENTS_VERTICES equ 0x80E8
GL_MAX_FRAGMENT_INPUT_COMPONENTS equ 0x9125
GL_MAX_FRAGMENT_UNIFORM_BLOCKS equ 0x8A2D
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS equ 0x8B49
GL_MAX_GEOMETRY_INPUT_COMPONENTS equ 0x9123
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS equ 0x9124
GL_MAX_GEOMETRY_OUTPUT_VERTICES equ 0x8DE0
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS equ 0x8C29
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS equ 0x8DE1
GL_MAX_GEOMETRY_UNIFORM_BLOCKS equ 0x8A2C
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS equ 0x8DDF
GL_MAX_INTEGER_SAMPLES equ 0x9110
GL_MAX_PROGRAM_TEXEL_OFFSET equ 0x8905
GL_MAX_RECTANGLE_TEXTURE_SIZE equ 0x84F8
GL_MAX_RENDERBUFFER_SIZE equ 0x84E8
GL_MAX_SAMPLES equ 0x8D57
GL_MAX_SAMPLE_MASK_WORDS equ 0x8E59
GL_MAX_SERVER_WAIT_TIMEOUT equ 0x9111
GL_MAX_TEXTURE_BUFFER_SIZE equ 0x8C2B
GL_MAX_TEXTURE_IMAGE_UNITS equ 0x8872
GL_MAX_TEXTURE_LOD_BIAS equ 0x84FD
GL_MAX_TEXTURE_SIZE equ 0x0D33
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS equ 0x8C8A
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS equ 0x8C8B
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS equ 0x8C80
GL_MAX_UNIFORM_BLOCK_SIZE equ 0x8A30
GL_MAX_UNIFORM_BUFFER_BINDINGS equ 0x8A2F
GL_MAX_VARYING_COMPONENTS equ 0x8B4B
GL_MAX_VARYING_FLOATS equ 0x8B4B
GL_MAX_VERTEX_ATTRIBS equ 0x8869
GL_MAX_VERTEX_OUTPUT_COMPONENTS equ 0x9122
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS equ 0x8B4C
GL_MAX_VERTEX_UNIFORM_BLOCKS equ 0x8A2B
GL_MAX_VERTEX_UNIFORM_COMPONENTS equ 0x8B4A
GL_MAX_VIEWPORT_DIMS equ 0x0D3A
GL_MIN equ 0x8007
GL_MINOR_VERSION equ 0x821C
GL_MIN_PROGRAM_TEXEL_OFFSET equ 0x8904
GL_MIRRORED_REPEAT equ 0x8370
GL_MULTISAMPLE equ 0x809D
GL_NAND equ 0x150E
GL_NEAREST equ 0x2600
GL_NEAREST_MIPMAP_LINEAR equ 0x2702
GL_NEAREST_MIPMAP_NEAREST equ 0x2700
GL_NEVER equ 0x0200
GL_NICEST equ 0x1102
GL_NONE equ 0
GL_NOOP equ 0x1505
GL_NOR equ 0x1508
GL_NOTEQUAL equ 0x0205
GL_NO_ERROR equ 0
GL_NUM_COMPRESSED_TEXTURE_FORMATS equ 0x86A2
GL_NUM_EXTENSIONS equ 0x821D
GL_OBJECT_TYPE equ 0x9112
GL_ONE equ 1
GL_ONE_MINUS_CONSTANT_ALPHA equ 0x8004
GL_ONE_MINUS_CONSTANT_COLOR equ 0x8002
GL_ONE_MINUS_DST_ALPHA equ 0x0305
GL_ONE_MINUS_DST_COLOR equ 0x0307
GL_ONE_MINUS_SRC1_ALPHA equ 0x88FB
GL_ONE_MINUS_SRC1_COLOR equ 0x88FA
GL_ONE_MINUS_SRC_ALPHA equ 0x0303
GL_ONE_MINUS_SRC_COLOR equ 0x0301
GL_OR equ 0x1507
GL_OR_INVERTED equ 0x150D
GL_OR_REVERSE equ 0x150B
GL_OUT_OF_MEMORY equ 0x0505
GL_PACK_ALIGNMENT equ 0x0D05
GL_PACK_IMAGE_HEIGHT equ 0x806C
GL_PACK_LSB_FIRST equ 0x0D01
GL_PACK_ROW_LENGTH equ 0x0D02
GL_PACK_SKIP_IMAGES equ 0x806B
GL_PACK_SKIP_PIXELS equ 0x0D04
GL_PACK_SKIP_ROWS equ 0x0D03
GL_PACK_SWAP_BYTES equ 0x0D00
GL_PIXEL_PACK_BUFFER equ 0x88EB
GL_PIXEL_PACK_BUFFER_BINDING equ 0x88ED
GL_PIXEL_UNPACK_BUFFER equ 0x88EC
GL_PIXEL_UNPACK_BUFFER_BINDING equ 0x88EF
GL_POINT equ 0x1B00
GL_POINTS equ 0x0000
GL_POINT_FADE_THRESHOLD_SIZE equ 0x8128
GL_POINT_SIZE equ 0x0B11
GL_POINT_SIZE_GRANULARITY equ 0x0B13
GL_POINT_SIZE_RANGE equ 0x0B12
GL_POINT_SPRITE_COORD_ORIGIN equ 0x8CA0
GL_POLYGON_MODE equ 0x0B40
GL_POLYGON_OFFSET_FACTOR equ 0x8038
GL_POLYGON_OFFSET_FILL equ 0x8037
GL_POLYGON_OFFSET_LINE equ 0x2A02
GL_POLYGON_OFFSET_POINT equ 0x2A01
GL_POLYGON_OFFSET_UNITS equ 0x2A00
GL_POLYGON_SMOOTH equ 0x0B41
GL_POLYGON_SMOOTH_HINT equ 0x0C53
GL_PRIMITIVES_GENERATED equ 0x8C87
GL_PRIMITIVE_RESTART equ 0x8F9D
GL_PRIMITIVE_RESTART_INDEX equ 0x8F9E
GL_PROGRAM_POINT_SIZE equ 0x8642
GL_PROVOKING_VERTEX equ 0x8E4F
GL_PROXY_TEXTURE_1D equ 0x8063
GL_PROXY_TEXTURE_1D_ARRAY equ 0x8C19
GL_PROXY_TEXTURE_2D equ 0x8064
GL_PROXY_TEXTURE_2D_ARRAY equ 0x8C1B
GL_PROXY_TEXTURE_2D_MULTISAMPLE equ 0x9101
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY equ 0x9103
GL_PROXY_TEXTURE_3D equ 0x8070
GL_PROXY_TEXTURE_CUBE_MAP equ 0x851B
GL_PROXY_TEXTURE_RECTANGLE equ 0x84F7
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION equ 0x8E4C
GL_QUERY_BY_REGION_NO_WAIT equ 0x8E16
GL_QUERY_BY_REGION_WAIT equ 0x8E15
GL_QUERY_COUNTER_BITS equ 0x8864
GL_QUERY_NO_WAIT equ 0x8E14
GL_QUERY_RESULT equ 0x8866
GL_QUERY_RESULT_AVAILABLE equ 0x8867
GL_QUERY_WAIT equ 0x8E13
GL_R11F_G11F_B10F equ 0x8C3A
GL_R16 equ 0x822A
GL_R16F equ 0x822D
GL_R16I equ 0x8233
GL_R16UI equ 0x8234
GL_R16_SNORM equ 0x8F98
GL_R32F equ 0x822E
GL_R32I equ 0x8235
GL_R32UI equ 0x8236
GL_R3_G3_B2 equ 0x2A10
GL_R8 equ 0x8229
GL_R8I equ 0x8231
GL_R8UI equ 0x8232
GL_R8_SNORM equ 0x8F94
GL_RASTERIZER_DISCARD equ 0x8C89
GL_READ_BUFFER equ 0x0C02
GL_READ_FRAMEBUFFER equ 0x8CA8
GL_READ_FRAMEBUFFER_BINDING equ 0x8CAA
GL_READ_ONLY equ 0x88B8
GL_READ_WRITE equ 0x88BA
GL_RED equ 0x1903
GL_RED_INTEGER equ 0x8D94
GL_RENDERBUFFER equ 0x8D41
GL_RENDERBUFFER_ALPHA_SIZE equ 0x8D53
GL_RENDERBUFFER_BINDING equ 0x8CA7
GL_RENDERBUFFER_BLUE_SIZE equ 0x8D52
GL_RENDERBUFFER_DEPTH_SIZE equ 0x8D54
GL_RENDERBUFFER_GREEN_SIZE equ 0x8D51
GL_RENDERBUFFER_HEIGHT equ 0x8D43
GL_RENDERBUFFER_INTERNAL_FORMAT equ 0x8D44
GL_RENDERBUFFER_RED_SIZE equ 0x8D50
GL_RENDERBUFFER_SAMPLES equ 0x8CAB
GL_RENDERBUFFER_STENCIL_SIZE equ 0x8D55
GL_RENDERBUFFER_WIDTH equ 0x8D42
GL_RENDERER equ 0x1F01
GL_REPEAT equ 0x2901
GL_REPLACE equ 0x1E01
GL_RG equ 0x8227
GL_RG16 equ 0x822C
GL_RG16F equ 0x822F
GL_RG16I equ 0x8239
GL_RG16UI equ 0x823A
GL_RG16_SNORM equ 0x8F99
GL_RG32F equ 0x8230
GL_RG32I equ 0x823B
GL_RG32UI equ 0x823C
GL_RG8 equ 0x822B
GL_RG8I equ 0x8237
GL_RG8UI equ 0x8238
GL_RG8_SNORM equ 0x8F95
GL_RGB equ 0x1907
GL_RGB10 equ 0x8052
GL_RGB10_A2 equ 0x8059
GL_RGB10_A2UI equ 0x906F
GL_RGB12 equ 0x8053
GL_RGB16 equ 0x8054
GL_RGB16F equ 0x881B
GL_RGB16I equ 0x8D89
GL_RGB16UI equ 0x8D77
GL_RGB16_SNORM equ 0x8F9A
GL_RGB32F equ 0x8815
GL_RGB32I equ 0x8D83
GL_RGB32UI equ 0x8D71
GL_RGB4 equ 0x804F
GL_RGB5 equ 0x8050
GL_RGB5_A1 equ 0x8057
GL_RGB8 equ 0x8051
GL_RGB8I equ 0x8D8F
GL_RGB8UI equ 0x8D7D
GL_RGB8_SNORM equ 0x8F96
GL_RGB9_E5 equ 0x8C3D
GL_RGBA equ 0x1908
GL_RGBA12 equ 0x805A
GL_RGBA16 equ 0x805B
GL_RGBA16F equ 0x881A
GL_RGBA16I equ 0x8D88
GL_RGBA16UI equ 0x8D76
GL_RGBA16_SNORM equ 0x8F9B
GL_RGBA2 equ 0x8055
GL_RGBA32F equ 0x8814
GL_RGBA32I equ 0x8D82
GL_RGBA32UI equ 0x8D70
GL_RGBA4 equ 0x8056
GL_RGBA8 equ 0x8058
GL_RGBA8I equ 0x8D8E
GL_RGBA8UI equ 0x8D7C
GL_RGBA8_SNORM equ 0x8F97
GL_RGBA_INTEGER equ 0x8D99
GL_RGB_INTEGER equ 0x8D98
GL_RG_INTEGER equ 0x8228
GL_RIGHT equ 0x0407
GL_SAMPLER_1D equ 0x8B5D
GL_SAMPLER_1D_ARRAY equ 0x8DC0
GL_SAMPLER_1D_ARRAY_SHADOW equ 0x8DC3
GL_SAMPLER_1D_SHADOW equ 0x8B61
GL_SAMPLER_2D equ 0x8B5E
GL_SAMPLER_2D_ARRAY equ 0x8DC1
GL_SAMPLER_2D_ARRAY_SHADOW equ 0x8DC4
GL_SAMPLER_2D_MULTISAMPLE equ 0x9108
GL_SAMPLER_2D_MULTISAMPLE_ARRAY equ 0x910B
GL_SAMPLER_2D_RECT equ 0x8B63
GL_SAMPLER_2D_RECT_SHADOW equ 0x8B64
GL_SAMPLER_2D_SHADOW equ 0x8B62
GL_SAMPLER_3D equ 0x8B5F
GL_SAMPLER_BINDING equ 0x8919
GL_SAMPLER_BUFFER equ 0x8DC2
GL_SAMPLER_CUBE equ 0x8B60
GL_SAMPLER_CUBE_SHADOW equ 0x8DC5
GL_SAMPLES equ 0x80A9
GL_SAMPLES_PASSED equ 0x8914
GL_SAMPLE_ALPHA_TO_COVERAGE equ 0x809E
GL_SAMPLE_ALPHA_TO_ONE equ 0x809F
GL_SAMPLE_BUFFERS equ 0x80A8
GL_SAMPLE_COVERAGE equ 0x80A0
GL_SAMPLE_COVERAGE_INVERT equ 0x80AB
GL_SAMPLE_COVERAGE_VALUE equ 0x80AA
GL_SAMPLE_MASK equ 0x8E51
GL_SAMPLE_MASK_VALUE equ 0x8E52
GL_SAMPLE_POSITION equ 0x8E50
GL_SCISSOR_BOX equ 0x0C10
GL_SCISSOR_TEST equ 0x0C11
GL_SEPARATE_ATTRIBS equ 0x8C8D
GL_SET equ 0x150F
GL_SHADER_SOURCE_LENGTH equ 0x8B88
GL_SHADER_TYPE equ 0x8B4F
GL_SHADING_LANGUAGE_VERSION equ 0x8B8C
GL_SHORT equ 0x1402
GL_SIGNALED equ 0x9119
GL_SIGNED_NORMALIZED equ 0x8F9C
GL_SMOOTH_LINE_WIDTH_GRANULARITY equ 0x0B23
GL_SMOOTH_LINE_WIDTH_RANGE equ 0x0B22
GL_SMOOTH_POINT_SIZE_GRANULARITY equ 0x0B13
GL_SMOOTH_POINT_SIZE_RANGE equ 0x0B12
GL_SRC1_ALPHA equ 0x8589
GL_SRC1_COLOR equ 0x88F9
GL_SRC_ALPHA equ 0x0302
GL_SRC_ALPHA_SATURATE equ 0x0308
GL_SRC_COLOR equ 0x0300
GL_SRGB equ 0x8C40
GL_SRGB8 equ 0x8C41
GL_SRGB8_ALPHA8 equ 0x8C43
GL_SRGB_ALPHA equ 0x8C42
GL_STATIC_COPY equ 0x88E6
GL_STATIC_DRAW equ 0x88E4
GL_STATIC_READ equ 0x88E5
GL_STENCIL equ 0x1802
GL_STENCIL_ATTACHMENT equ 0x8D20
GL_STENCIL_BACK_FAIL equ 0x8801
GL_STENCIL_BACK_FUNC equ 0x8800
GL_STENCIL_BACK_PASS_DEPTH_FAIL equ 0x8802
GL_STENCIL_BACK_PASS_DEPTH_PASS equ 0x8803
GL_STENCIL_BACK_REF equ 0x8CA3
GL_STENCIL_BACK_VALUE_MASK equ 0x8CA4
GL_STENCIL_BACK_WRITEMASK equ 0x8CA5
GL_STENCIL_BUFFER_BIT equ 0x00000400
GL_STENCIL_CLEAR_VALUE equ 0x0B91
GL_STENCIL_FAIL equ 0x0B94
GL_STENCIL_FUNC equ 0x0B92
GL_STENCIL_INDEX equ 0x1901
GL_STENCIL_INDEX1 equ 0x8D46
GL_STENCIL_INDEX16 equ 0x8D49
GL_STENCIL_INDEX4 equ 0x8D47
GL_STENCIL_INDEX8 equ 0x8D48
GL_STENCIL_PASS_DEPTH_FAIL equ 0x0B95
GL_STENCIL_PASS_DEPTH_PASS equ 0x0B96
GL_STENCIL_REF equ 0x0B97
GL_STENCIL_TEST equ 0x0B90
GL_STENCIL_VALUE_MASK equ 0x0B93
GL_STENCIL_WRITEMASK equ 0x0B98
GL_STEREO equ 0x0C33
GL_STREAM_COPY equ 0x88E2
GL_STREAM_DRAW equ 0x88E0
GL_STREAM_READ equ 0x88E1
GL_SUBPIXEL_BITS equ 0x0D50
GL_SYNC_CONDITION equ 0x9113
GL_SYNC_FENCE equ 0x9116
GL_SYNC_FLAGS equ 0x9115
GL_SYNC_FLUSH_COMMANDS_BIT equ 0x00000001
GL_SYNC_GPU_COMMANDS_COMPLETE equ 0x9117
GL_SYNC_STATUS equ 0x9114
GL_TEXTURE equ 0x1702
GL_TEXTURE0 equ 0x84C0
GL_TEXTURE1 equ 0x84C1
GL_TEXTURE10 equ 0x84CA
GL_TEXTURE11 equ 0x84CB
GL_TEXTURE12 equ 0x84CC
GL_TEXTURE13 equ 0x84CD
GL_TEXTURE14 equ 0x84CE
GL_TEXTURE15 equ 0x84CF
GL_TEXTURE16 equ 0x84D0
GL_TEXTURE17 equ 0x84D1
GL_TEXTURE18 equ 0x84D2
GL_TEXTURE19 equ 0x84D3
GL_TEXTURE2 equ 0x84C2
GL_TEXTURE20 equ 0x84D4
GL_TEXTURE21 equ 0x84D5
GL_TEXTURE22 equ 0x84D6
GL_TEXTURE23 equ 0x84D7
GL_TEXTURE24 equ 0x84D8
GL_TEXTURE25 equ 0x84D9
GL_TEXTURE26 equ 0x84DA
GL_TEXTURE27 equ 0x84DB
GL_TEXTURE28 equ 0x84DC
GL_TEXTURE29 equ 0x84DD
GL_TEXTURE3 equ 0x84C3
GL_TEXTURE30 equ 0x84DE
GL_TEXTURE31 equ 0x84DF
GL_TEXTURE4 equ 0x84C4
GL_TEXTURE5 equ 0x84C5
GL_TEXTURE6 equ 0x84C6
GL_TEXTURE7 equ 0x84C7
GL_TEXTURE8 equ 0x84C8
GL_TEXTURE9 equ 0x84C9
GL_TEXTURE_1D equ 0x0DE0
GL_TEXTURE_1D_ARRAY equ 0x8C18
GL_TEXTURE_2D equ 0x0DE1
GL_TEXTURE_2D_ARRAY equ 0x8C1A
GL_TEXTURE_2D_MULTISAMPLE equ 0x9100
GL_TEXTURE_2D_MULTISAMPLE_ARRAY equ 0x9102
GL_TEXTURE_3D equ 0x806F
GL_TEXTURE_ALPHA_SIZE equ 0x805F
GL_TEXTURE_ALPHA_TYPE equ 0x8C13
GL_TEXTURE_BASE_LEVEL equ 0x813C
GL_TEXTURE_BINDING_1D equ 0x8068
GL_TEXTURE_BINDING_1D_ARRAY equ 0x8C1C
GL_TEXTURE_BINDING_2D equ 0x8069
GL_TEXTURE_BINDING_2D_ARRAY equ 0x8C1D
GL_TEXTURE_BINDING_2D_MULTISAMPLE equ 0x9104
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY equ 0x9105
GL_TEXTURE_BINDING_3D equ 0x806A
GL_TEXTURE_BINDING_BUFFER equ 0x8C2C
GL_TEXTURE_BINDING_CUBE_MAP equ 0x8514
GL_TEXTURE_BINDING_RECTANGLE equ 0x84F6
GL_TEXTURE_BLUE_SIZE equ 0x805E
GL_TEXTURE_BLUE_TYPE equ 0x8C12
GL_TEXTURE_BORDER_COLOR equ 0x1004
GL_TEXTURE_BUFFER equ 0x8C2A
GL_TEXTURE_BUFFER_DATA_STORE_BINDING equ 0x8C2D
GL_TEXTURE_COMPARE_FUNC equ 0x884D
GL_TEXTURE_COMPARE_MODE equ 0x884C
GL_TEXTURE_COMPRESSED equ 0x86A1
GL_TEXTURE_COMPRESSED_IMAGE_SIZE equ 0x86A0
GL_TEXTURE_COMPRESSION_HINT equ 0x84EF
GL_TEXTURE_CUBE_MAP equ 0x8513
GL_TEXTURE_CUBE_MAP_NEGATIVE_X equ 0x8516
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y equ 0x8518
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z equ 0x851A
GL_TEXTURE_CUBE_MAP_POSITIVE_X equ 0x8515
GL_TEXTURE_CUBE_MAP_POSITIVE_Y equ 0x8517
GL_TEXTURE_CUBE_MAP_POSITIVE_Z equ 0x8519
GL_TEXTURE_CUBE_MAP_SEAMLESS equ 0x884F
GL_TEXTURE_DEPTH equ 0x8071
GL_TEXTURE_DEPTH_SIZE equ 0x884A
GL_TEXTURE_DEPTH_TYPE equ 0x8C16
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS equ 0x9107
GL_TEXTURE_GREEN_SIZE equ 0x805D
GL_TEXTURE_GREEN_TYPE equ 0x8C11
GL_TEXTURE_HEIGHT equ 0x1001
GL_TEXTURE_INTERNAL_FORMAT equ 0x1003
GL_TEXTURE_LOD_BIAS equ 0x8501
GL_TEXTURE_MAG_FILTER equ 0x2800
GL_TEXTURE_MAX_LEVEL equ 0x813D
GL_TEXTURE_MAX_LOD equ 0x813B
GL_TEXTURE_MIN_FILTER equ 0x2801
GL_TEXTURE_MIN_LOD equ 0x813A
GL_TEXTURE_RECTANGLE equ 0x84F5
GL_TEXTURE_RED_SIZE equ 0x805C
GL_TEXTURE_RED_TYPE equ 0x8C10
GL_TEXTURE_SAMPLES equ 0x9106
GL_TEXTURE_SHARED_SIZE equ 0x8C3F
GL_TEXTURE_STENCIL_SIZE equ 0x88F1
GL_TEXTURE_SWIZZLE_A equ 0x8E45
GL_TEXTURE_SWIZZLE_B equ 0x8E44
GL_TEXTURE_SWIZZLE_G equ 0x8E43
GL_TEXTURE_SWIZZLE_R equ 0x8E42
GL_TEXTURE_SWIZZLE_RGBA equ 0x8E46
GL_TEXTURE_WIDTH equ 0x1000
GL_TEXTURE_WRAP_R equ 0x8072
GL_TEXTURE_WRAP_S equ 0x2802
GL_TEXTURE_WRAP_T equ 0x2803
GL_TIMEOUT_EXPIRED equ 0x911B
GL_TIMEOUT_IGNORED equ 0xFFFFFFFFFFFFFFFF
GL_TIMESTAMP equ 0x8E28
GL_TIME_ELAPSED equ 0x88BF
GL_TRANSFORM_FEEDBACK_BUFFER equ 0x8C8E
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING equ 0x8C8F
GL_TRANSFORM_FEEDBACK_BUFFER_MODE equ 0x8C7F
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE equ 0x8C85
GL_TRANSFORM_FEEDBACK_BUFFER_START equ 0x8C84
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN equ 0x8C88
GL_TRANSFORM_FEEDBACK_VARYINGS equ 0x8C83
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH equ 0x8C76
GL_TRIANGLES equ 0x0004
GL_TRIANGLES_ADJACENCY equ 0x000C
GL_TRIANGLE_FAN equ 0x0006
GL_TRIANGLE_STRIP equ 0x0005
GL_TRIANGLE_STRIP_ADJACENCY equ 0x000D
GL_TRUE equ 1
GL_UNIFORM_ARRAY_STRIDE equ 0x8A3C
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS equ 0x8A42
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES equ 0x8A43
GL_UNIFORM_BLOCK_BINDING equ 0x8A3F
GL_UNIFORM_BLOCK_DATA_SIZE equ 0x8A40
GL_UNIFORM_BLOCK_INDEX equ 0x8A3A
GL_UNIFORM_BLOCK_NAME_LENGTH equ 0x8A41
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER equ 0x8A46
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER equ 0x8A45
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER equ 0x8A44
GL_UNIFORM_BUFFER equ 0x8A11
GL_UNIFORM_BUFFER_BINDING equ 0x8A28
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT equ 0x8A34
GL_UNIFORM_BUFFER_SIZE equ 0x8A2A
GL_UNIFORM_BUFFER_START equ 0x8A29
GL_UNIFORM_IS_ROW_MAJOR equ 0x8A3E
GL_UNIFORM_MATRIX_STRIDE equ 0x8A3D
GL_UNIFORM_NAME_LENGTH equ 0x8A39
GL_UNIFORM_OFFSET equ 0x8A3B
GL_UNIFORM_SIZE equ 0x8A38
GL_UNIFORM_TYPE equ 0x8A37
GL_UNPACK_ALIGNMENT equ 0x0CF5
GL_UNPACK_IMAGE_HEIGHT equ 0x806E
GL_UNPACK_LSB_FIRST equ 0x0CF1
GL_UNPACK_ROW_LENGTH equ 0x0CF2
GL_UNPACK_SKIP_IMAGES equ 0x806D
GL_UNPACK_SKIP_PIXELS equ 0x0CF4
GL_UNPACK_SKIP_ROWS equ 0x0CF3
GL_UNPACK_SWAP_BYTES equ 0x0CF0
GL_UNSIGNALED equ 0x9118
GL_UNSIGNED_BYTE equ 0x1401
GL_UNSIGNED_BYTE_2_3_3_REV equ 0x8362
GL_UNSIGNED_BYTE_3_3_2 equ 0x8032
GL_UNSIGNED_INT equ 0x1405
GL_UNSIGNED_INT_10F_11F_11F_REV equ 0x8C3B
GL_UNSIGNED_INT_10_10_10_2 equ 0x8036
GL_UNSIGNED_INT_24_8 equ 0x84FA
GL_UNSIGNED_INT_2_10_10_10_REV equ 0x8368
GL_UNSIGNED_INT_5_9_9_9_REV equ 0x8C3E
GL_UNSIGNED_INT_8_8_8_8 equ 0x8035
GL_UNSIGNED_INT_8_8_8_8_REV equ 0x8367
GL_UNSIGNED_INT_SAMPLER_1D equ 0x8DD1
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY equ 0x8DD6
GL_UNSIGNED_INT_SAMPLER_2D equ 0x8DD2
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY equ 0x8DD7
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE equ 0x910A
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY equ 0x910D
GL_UNSIGNED_INT_SAMPLER_2D_RECT equ 0x8DD5
GL_UNSIGNED_INT_SAMPLER_3D equ 0x8DD3
GL_UNSIGNED_INT_SAMPLER_BUFFER equ 0x8DD8
GL_UNSIGNED_INT_SAMPLER_CUBE equ 0x8DD4
GL_UNSIGNED_INT_VEC2 equ 0x8DC6
GL_UNSIGNED_INT_VEC3 equ 0x8DC7
GL_UNSIGNED_INT_VEC4 equ 0x8DC8
GL_UNSIGNED_NORMALIZED equ 0x8C17
GL_UNSIGNED_SHORT equ 0x1403
GL_UNSIGNED_SHORT_1_5_5_5_REV equ 0x8366
GL_UNSIGNED_SHORT_4_4_4_4 equ 0x8033
GL_UNSIGNED_SHORT_4_4_4_4_REV equ 0x8365
GL_UNSIGNED_SHORT_5_5_5_1 equ 0x8034
GL_UNSIGNED_SHORT_5_6_5 equ 0x8363
GL_UNSIGNED_SHORT_5_6_5_REV equ 0x8364
GL_UPPER_LEFT equ 0x8CA2
GL_VALIDATE_STATUS equ 0x8B83
GL_VENDOR equ 0x1F00
GL_VERSION equ 0x1F02
GL_VERTEX_ARRAY_BINDING equ 0x85B5
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING equ 0x889F
GL_VERTEX_ATTRIB_ARRAY_DIVISOR equ 0x88FE
GL_VERTEX_ATTRIB_ARRAY_ENABLED equ 0x8622
GL_VERTEX_ATTRIB_ARRAY_INTEGER equ 0x88FD
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED equ 0x886A
GL_VERTEX_ATTRIB_ARRAY_POINTER equ 0x8645
GL_VERTEX_ATTRIB_ARRAY_SIZE equ 0x8623
GL_VERTEX_ATTRIB_ARRAY_STRIDE equ 0x8624
GL_VERTEX_ATTRIB_ARRAY_TYPE equ 0x8625
GL_VERTEX_PROGRAM_POINT_SIZE equ 0x8642
GL_VERTEX_SHADER equ 0x8B31
GL_VIEWPORT equ 0x0BA2
GL_WAIT_FAILED equ 0x911D
GL_WRITE_ONLY equ 0x88B9
GL_XOR equ 0x1506
GL_ZERO equ 0

GL_VERSION_1_0 equ 1
GLAD_GL_VERSION_1_0 dd 0 ; Declare GLAD_GL_VERSION_1_0 as a DWORD, initialize to 0
GL_VERSION_1_1 equ 1
GLAD_GL_VERSION_1_1 dd 0 ; Same thing again for GLAD_GL_VERSION_1_1 and for the rest below
GL_VERSION_1_2 equ 1
GLAD_GL_VERSION_1_2 dd 0
GL_VERSION_1_3 equ 1
GLAD_GL_VERSION_1_3 dd 0
GL_VERSION_1_4 equ 1
GLAD_GL_VERSION_1_4 dd 0
GL_VERSION_1_5 equ 1
GLAD_GL_VERSION_1_5 dd 0
GL_VERSION_2_0 equ 1
GLAD_GL_VERSION_2_0 dd 0
GL_VERSION_2_1 equ 1
GLAD_GL_VERSION_2_1 dd 0
GL_VERSION_3_0 equ 1
GLAD_GL_VERSION_3_0 dd 0
GL_VERSION_3_1 equ 1
GLAD_GL_VERSION_3_1 dd 0
GL_VERSION_3_2 equ 1
GLAD_GL_VERSION_3_2 dd 0
GL_VERSION_3_3 equ 1
GLAD_GL_VERSION_3_3 dd 0

; Start of untranslated
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
typedef void (GLAD_API_PTR *PFNGLCLEARPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (GLAD_API_PTR *PFNGLCLEARSTENCILPROC)(GLint s);
typedef GLenum (GLAD_API_PTR *PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef GLuint (GLAD_API_PTR *PFNGLCREATEPROGRAMPROC)(void);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROC)(GLenum type);
typedef void (GLAD_API_PTR *PFNGLCULLFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLDELETESHADERPROC)(GLuint shader);
typedef void (GLAD_API_PTR *PFNGLDELETESYNCPROC)(GLsync sync);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (GLAD_API_PTR *PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLDISABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEIPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLENABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEIPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDQUERYPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKPROC)(void);
typedef GLsync (GLAD_API_PTR *PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLFINISHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRONTFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void * img);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble * data);
typedef GLenum (GLAD_API_PTR *PFNGLGETERRORPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETFLOATVPROC)(GLenum pname, GLfloat * data);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERVPROC)(GLenum pname, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
typedef void (GLAD_API_PTR *PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint * params);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGPROC)(GLenum name);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef void (GLAD_API_PTR *PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef GLuint (GLAD_API_PTR *PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPROC)(GLuint program);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISSAMPLERPROC)(GLuint sampler);
typedef GLboolean (GLAD_API_PTR *PFNGLISSHADERPROC)(GLuint shader);
typedef GLboolean (GLAD_API_PTR *PFNGLISSYNCPROC)(GLsync sync);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREPROC)(GLuint texture);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLLOGICOPPROC)(GLenum opcode);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void (GLAD_API_PTR *PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
typedef void (GLAD_API_PTR *PFNGLREADBUFFERPROC)(GLenum src);
typedef void (GLAD_API_PTR *PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
; End of untranslated
GLAD_API_CALL PROC PFNGLACTIVETEXTUREPROC
    jmp glad_glActiveTexture
GLAD_API_CALL ENDP

glActiveTexture EQU glad_glActiveTexture

GLAD_API_CALL PROC PFNGLATTACHSHADERPROC
    jmp glad_glAttachShader
GLAD_API_CALL ENDP

glAttachShader EQU glad_glAttachShader

GLAD_API_CALL PROC PFNGLBEGINCONDITIONALRENDERPROC
    jmp glad_glBeginConditionalRender
GLAD_API_CALL ENDP

glBeginConditionalRender EQU glad_glBeginConditionalRender

GLAD_API_CALL PROC PFNGLBEGINQUERYPROC
    jmp glad_glBeginQuery
GLAD_API_CALL ENDP

glBeginQuery EQU glad_glBeginQuery

GLAD_API_CALL PROC PFNGLBEGINTRANSFORMFEEDBACKPROC
    jmp glad_glBeginTransformFeedback
GLAD_API_CALL ENDP

glBeginTransformFeedback EQU glad_glBeginTransformFeedback

GLAD_API_CALL PROC PFNGLBINDATTRIBLOCATIONPROC
    jmp glad_glBindAttribLocation
GLAD_API_CALL ENDP

glBindAttribLocation EQU glad_glBindAttribLocation

GLAD_API_CALL PROC PFNGLBINDBUFFERPROC
    jmp glad_glBindBuffer
GLAD_API_CALL ENDP

glBindBuffer EQU glad_glBindBuffer

GLAD_API_CALL PROC PFNGLBINDBUFFERBASEPROC
    jmp glad_glBindBufferBase
GLAD_API_CALL ENDP

glBindBufferBase EQU glad_glBindBufferBase

GLAD_API_CALL PROC PFNGLBINDBUFFERRANGEPROC
    jmp glad_glBindBufferRange
GLAD_API_CALL ENDP

glBindBufferRange EQU glad_glBindBufferRange

GLAD_API_CALL PROC PFNGLBINDFRAGDATALOCATIONPROC
    jmp glad_glBindFragDataLocation
GLAD_API_CALL ENDP

glBindFragDataLocation EQU glad_glBindFragDataLocation

GLAD_API_CALL PROC PFNGLBINDFRAGDATALOCATIONINDEXEDPROC
    jmp glad_glBindFragDataLocationIndexed
GLAD_API_CALL ENDP

glBindFragDataLocationIndexed EQU glad_glBindFragDataLocationIndexed

GLAD_API_CALL PROC PFNGLBINDFRAMEBUFFERPROC
    jmp glad_glBindFramebuffer
GLAD_API_CALL ENDP

glBindFramebuffer EQU glad_glBindFramebuffer

GLAD_API_CALL PROC PFNGLBINDRENDERBUFFERPROC
    jmp glad_glBindRenderbuffer
GLAD_API_CALL ENDP

glBindRenderbuffer EQU glad_glBindRenderbuffer

GLAD_API_CALL PROC PFNGLBINDSAMPLERPROC
    jmp glad_glBindSampler
GLAD_API_CALL ENDP

glBindSampler EQU glad_glBindSampler

GLAD_API_CALL PROC PFNGLBINDTEXTUREPROC
    jmp glad_glBindTexture
GLAD_API_CALL ENDP

glBindTexture EQU glad_glBindTexture

GLAD_API_CALL PROC PFNGLBINDVERTEXARRAYPROC
    jmp glad_glBindVertexArray
GLAD_API_CALL ENDP

glBindVertexArray EQU glad_glBindVertexArray

GLAD_API_CALL PROC PFNGLBLENDCOLORPROC
    jmp glad_glBlendColor
GLAD_API_CALL ENDP

glBlendColor EQU glad_glBlendColor

GLAD_API_CALL PROC PFNGLBLENDEQUATIONPROC
    jmp glad_glBlendEquation
GLAD_API_CALL ENDP

glBlendEquation EQU glad_glBlendEquation

GLAD_API_CALL PROC PFNGLBLENDEQUATIONSEPARATEPROC
    jmp glad_glBlendEquationSeparate
GLAD_API_CALL ENDP

glBlendEquationSeparate EQU glad_glBlendEquationSeparate

GLAD_API_CALL PROC PFNGLBLENDFUNCPROC
    jmp glad_glBlendFunc
GLAD_API_CALL ENDP

glBlendFunc EQU glad_glBlendFunc

GLAD_API_CALL PROC PFNGLBLENDFUNCSEPARATEPROC
    jmp glad_glBlendFuncSeparate
GLAD_API_CALL ENDP

glBlendFuncSeparate EQU glad_glBlendFuncSeparate

GLAD_API_CALL PROC PFNGLBLITFRAMEBUFFERPROC
    jmp glad_glBlitFramebuffer
GLAD_API_CALL ENDP

glBlitFramebuffer EQU glad_glBlitFramebuffer

GLAD_API_CALL PROC PFNGLBUFFERDATAPROC
    jmp glad_glBufferData
GLAD_API_CALL ENDP

glBufferData EQU glad_glBufferData

GLAD_API_CALL PROC PFNGLBUFFERSUBDATAPROC
    jmp glad_glBufferSubData
GLAD_API_CALL ENDP

glBufferSubData EQU glad_glBufferSubData

GLAD_API_CALL PROC PFNGLCHECKFRAMEBUFFERSTATUSPROC
    jmp glad_glCheckFramebufferStatus
GLAD_API_CALL ENDP

glCheckFramebufferStatus EQU glad_glCheckFramebufferStatus

GLAD_API_CALL PROC PFNGLCLAMPCOLORPROC
    jmp glad_glClampColor
GLAD_API_CALL ENDP

glClampColor EQU glad_glClampColor

GLAD_API_CALL PROC PFNGLCLEARPROC
    jmp glad_glClear
GLAD_API_CALL ENDP

glClear EQU glad_glClear

GLAD_API_CALL PROC PFNGLCLEARBUFFERFIPROC
    jmp glad_glClearBufferfi
GLAD_API_CALL ENDP

glClearBufferfi EQU glad_glClearBufferfi

GLAD_API_CALL PROC PFNGLCLEARBUFFERFVPROC
    jmp glad_glClearBufferfv
GLAD_API_CALL ENDP

glClearBufferfv EQU glad

GLAD_API_CALL PROC PFNGLDELETEFRAMEBUFFERSPROC
    jmp glad_glDeleteFramebuffers
GLAD_API_CALL ENDP

glDeleteFramebuffers EQU glad_glDeleteFramebuffers

GLAD_API_CALL PROC PFNGLDELETEPROGRAMPROC
    jmp glad_glDeleteProgram
GLAD_API_CALL ENDP

glDeleteProgram EQU glad_glDeleteProgram

GLAD_API_CALL PROC PFNGLDELETEQUERIESPROC
    jmp glad_glDeleteQueries
GLAD_API_CALL ENDP

glDeleteQueries EQU glad_glDeleteQueries

GLAD_API_CALL PROC PFNGLDELETERENDERBUFFERSPROC
    jmp glad_glDeleteRenderbuffers
GLAD_API_CALL ENDP

glDeleteRenderbuffers EQU glad_glDeleteRenderbuffers

GLAD_API_CALL PROC PFNGLDELETESAMPLERSPROC
    jmp glad_glDeleteSamplers
GLAD_API_CALL ENDP

glDeleteSamplers EQU glad_glDeleteSamplers

GLAD_API_CALL PROC PFNGLDELETESHADERPROC
    jmp glad_glDeleteShader
GLAD_API_CALL ENDP

glDeleteShader EQU glad_glDeleteShader

GLAD_API_CALL PROC PFNGLDELETESYNCPROC
    jmp glad_glDeleteSync
GLAD_API_CALL ENDP

glDeleteSync EQU glad_glDeleteSync

GLAD_API_CALL PROC PFNGLDELETETEXTURESPROC
    jmp glad_glDeleteTextures
GLAD_API_CALL ENDP

glDeleteTextures EQU glad_glDeleteTextures

GLAD_API_CALL PROC PFNGLDELETEVERTEXARRAYSPROC
    jmp glad_glDeleteVertexArrays
GLAD_API_CALL ENDP

glDeleteVertexArrays EQU glad_glDeleteVertexArrays

GLAD_API_CALL PROC PFNGLDEPTHFUNCPROC
    jmp glad_glDepthFunc
GLAD_API_CALL ENDP

glDepthFunc EQU glad_glDepthFunc

GLAD_API_CALL PROC PFNGLDEPTHMASKPROC
    jmp glad_glDepthMask
GLAD_API_CALL ENDP

glDepthMask EQU glad_glDepthMask

GLAD_API_CALL PROC PFNGLDEPTHRANGEPROC
    jmp glad_glDepthRange
GLAD_API_CALL ENDP

glDepthRange EQU glad_glDepthRange

GLAD_API_CALL PROC PFNGLDETACHSHADERPROC
    jmp glad_glDetachShader
GLAD_API_CALL ENDP

glDetachShader EQU glad_glDetachShader

GLAD_API_CALL PROC PFNGLDISABLEPROC
    jmp glad_glDisable
GLAD_API_CALL ENDP

glDisable EQU glad_glDisable

GLAD_API_CALL PROC PFNGLDISABLEVERTEXATTRIBARRAYPROC
    jmp glad_glDisableVertexAttribArray
GLAD_API_CALL ENDP

glDisableVertexAttribArray EQU glad_glDisableVertexAttribArray

GLAD_API_CALL PROC PFNGLDISABLEIPROC
    jmp glad_glDisablei
GLAD_API_CALL ENDP

glDisablei EQU glad_glDisablei

GLAD_API_CALL PROC PFNGLDRAWARRAYSPROC
    jmp glad_glDrawArrays
GLAD_API_CALL ENDP

glDrawArrays EQU glad_glDrawArrays

GLAD_API_CALL PROC PFNGLDRAWARRAYSINSTANCEDPROC
    jmp glad_glDrawArraysInstanced
GLAD_API_CALL ENDP

glDrawArraysInstanced EQU glad_glDrawArraysInstanced

GLAD_API_CALL PROC PFNGLDRAWBUFFERPROC
    jmp glad_glDrawBuffer
GLAD_API_CALL ENDP

glDrawBuffer EQU glad_glDrawBuffer

GLAD_API_CALL PROC PFNGLDRAWBUFFERSPROC
    jmp glad_glDrawBuffers
GLAD_API_CALL ENDP

glDrawBuffers EQU glad_glDrawBuffers

GLAD_API_CALL PROC PFNGLDRAWELEMENTSPROC
    jmp glad_glDrawElements
GLAD_API_CALL ENDP

glDrawElements EQU glad_glDrawElements

GLAD_API_CALL PROC PFNGLDRAWELEMENTSBASEVERTEXPROC
    jmp glad_glDrawElementsBaseVertex
GLAD_API_CALL ENDP

glDrawElementsBaseVertex EQU glad_glDrawElementsBaseVertex

GLAD_API_CALL PROC PFNGLDRAWELEMENTSINSTANCEDPROC
    jmp glad_glDrawElementsInstanced
GLAD_API_CALL ENDP

glDrawElementsInstanced EQU glad_glDrawElementsInstanced

GLAD_API_CALL PROC PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
    jmp glad_glDrawElementsInstancedBaseVertex
GLAD_API_CALL ENDP

glDrawElementsInstancedBaseVertex EQU glad_glDrawElementsInstancedBaseVertex

GLAD_API_CALL PROC PFNGLDRAWRANGEELEMENTSPROC
    jmp glad_glDrawRangeElements
GLAD_API_CALL ENDP

glDrawRangeElements EQU glad_glDrawRangeElements

GLAD_API_CALL PROC PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
    jmp glad_glDrawRangeElementsBaseVertex
GLAD_API_CALL ENDP

glDrawRangeElementsBaseVertex EQU glad_glDrawRangeElementsBaseVertex

GLAD_API_CALL PROC PFNGLENABLEPROC
    jmp glad_glEnable
GLAD_API_CALL ENDP

glEnable EQU glad_glEnable

GLAD_API_CALL PROC PFNGLENABLEVERTEXATTRIBARRAYPROC
    jmp glad_glEnableVertexAttribArray
GLAD_API_CALL ENDP

glEnableVertexAttribArray EQU glad_glEnableVertexAttribArray

GLAD_API_CALL PROC PFNGLENABLEIPROC
    jmp glad_glEnablei
GLAD_API_CALL ENDP

glEnablei EQU glad_glEnablei

GLAD_API_CALL PROC PFNGLENDCONDITIONALRENDERPROC
    jmp glad_glEndConditionalRender
GLAD_API_CALL ENDP

glEndConditionalRender EQU glad_glEndConditionalRender

GLAD_API_CALL PROC PFNGLENDQUERYPROC
    jmp glad_glEndQuery
GLAD_API_CALL ENDP

glEndQuery EQU glad_glEndQuery

GLAD_API_CALL PROC PFNGLENDTRANSFORMFEEDBACKPROC
    jmp glad_glEndTransformFeedback
GLAD_API_CALL ENDP

glEndTransformFeedback EQU glad_glEndTransformFeedback

GLAD_API_CALL PROC PFNGLFENCESYNCPROC
    jmp glad_glFenceSync
GLAD_API_CALL ENDP

glFenceSync EQU glad_glFenceSync

GLAD_API_CALL PROC PFNGLFINISHPROC
    jmp glad_glFinish
GLAD_API_CALL ENDP

glFinish EQU glad_glFinish

GLAD_API_CALL PROC PFNGLFLUSHPROC
    jmp glad_glFlush
GLAD_API_CALL ENDP

glFlush EQU glad_glFlush

GLAD_API_CALL PROC PFNGLFLUSHMAPPEDBUFFERRANGEPROC
    jmp glad_glFlushMappedBufferRange
GLAD_API_CALL ENDP

glFlushMappedBufferRange EQU glad_glFlushMappedBufferRange

GLAD_API_CALL PROC PFNGLFRAMEBUFFERRENDERBUFFERPROC
    jmp glad_glFramebufferRenderbuffer
GLAD_API_CALL ENDP

glFramebufferRenderbuffer EQU glad_glFramebufferRenderbuffer

GLAD_API_CALL PROC PFNGLFRAMEBUFFERTEXTUREPROC
    jmp glad_glFramebufferTexture
GLAD_API_CALL ENDP PFNGLFRAMEBUFFERTEXTUREPROC

glFramebufferTexture EQU glad_glFramebuffer

GLAD_API_CALL PROC  PFNGLFRAMEBUFFERTEXTUREPROC
	jmp glad_glFramebuffer
GLAD_API_CALL ENDP

glGetTexParameteriv equ glad_glGetTexParameteriv

GLAD_API_CALL PROC glad_glGetTransformFeedbackVarying
    jmp glad_glGetTransformFeedbackVarying
GLAD_API_CALL ENDP

glGetTransformFeedbackVarying equ glad_glGetTransformFeedbackVarying

GLAD_API_CALL PROC glad_glGetUniformBlockIndex
    jmp glad_glGetUniformBlockIndex
GLAD_API_CALL ENDP

glGetUniformBlockIndex equ glad_glGetUniformBlockIndex

GLAD_API_CALL PROC glad_glGetUniformIndices
    jmp glad_glGetUniformIndices
GLAD_API_CALL ENDP

glGetUniformIndices equ glad_glGetUniformIndices

GLAD_API_CALL PROC glad_glGetUniformLocation
    jmp glad_glGetUniformLocation
GLAD_API_CALL ENDP

glGetUniformLocation equ glad_glGetUniformLocation

GLAD_API_CALL PROC glad_glGetUniformfv
    jmp glad_glGetUniformfv
GLAD_API_CALL ENDP

glGetUniformfv equ glad_glGetUniformfv

GLAD_API_CALL PROC glad_glGetUniformiv
    jmp glad_glGetUniformiv
GLAD_API_CALL ENDP

glGetUniformiv equ glad_glGetUniformiv

GLAD_API_CALL PROC glad_glGetUniformuiv
    jmp glad_glGetUniformuiv
GLAD_API_CALL ENDP

glGetUniformuiv equ glad_glGetUniformuiv

GLAD_API_CALL PROC glad_glGetVertexAttribIiv
    jmp glad_glGetVertexAttribIiv
GLAD_API_CALL ENDP

glGetVertexAttribIiv equ glad_glGetVertexAttribIiv

GLAD_API_CALL PROC glad_glGetVertexAttribIuiv
    jmp glad_glGetVertexAttribIuiv
GLAD_API_CALL ENDP

glGetVertexAttribIuiv equ glad_glGetVertexAttribIuiv

GLAD_API_CALL PROC glad_glGetVertexAttribPointerv
    jmp glad_glGetVertexAttribPointerv
GLAD_API_CALL ENDP

glGetVertexAttribPointerv equ glad_glGetVertexAttribPointerv

GLAD_API_CALL PROC glad_glGetVertexAttribdv
    jmp glad_glGetVertexAttribdv
GLAD_API_CALL ENDP

glGetVertexAttribdv equ glad_glGetVertexAttribdv

GLAD_API_CALL PROC glad_glGetVertexAttribfv
    jmp glad_glGetVertexAttribfv
GLAD_API_CALL ENDP

glGetVertexAttribfv equ glad_glGetVertexAttribfv

GLAD_API_CALL PROC glad_glGetVertexAttribiv
    jmp glad_glGetVertexAttribiv
GLAD_API_CALL ENDP

glGetVertexAttribiv equ glad_glGetVertexAttribiv

GLAD_API_CALL PROC glad_glHint
    jmp glad_glHint
GLAD_API_CALL ENDP

glHint equ glad_glHint

GLAD_API_CALL PROC glad_glIsBuffer
    jmp glad_glIsBuffer
GLAD_API_CALL ENDP

glIsBuffer equ glad_glIsBuffer

GLAD_API_CALL PROC glad_glIsEnabled
    jmp glad_glIsEnabled
GLAD_API_CALL ENDP

glIsEnabled equ glad_glIsEnabled

GLAD_API_CALL PROC glad_glIsEnabledi
    jmp glad_glIsEnabledi
GLAD_API_CALL ENDP

glIsEnabledi equ glad_glIsEnabledi

GLAD_API_CALL PROC glad_glIsFramebuffer
    jmp glad_glIsFramebuffer
GLAD_API_CALL ENDP

glIsFramebuffer equ glad_glIsFramebuffer

GLAD_API_CALL PROC glad_glIsProgram
    jmp glad_glIsProgram
GLAD_API_CALL ENDP

glIsProgram equ glad_glIsProgram

GLAD_API_CALL PROC glad_glIsQuery
    jmp glad_glIsQuery
GLAD_API_CALL ENDP

glIsQuery equ glad_glIsQuery

GLAD_API_CALL PROC glad_glIsRenderbuffer
    jmp glad_glIsRenderbuffer
GLAD_API_CALL ENDP

glIsRenderbuffer equ glad_glIsRenderbuffer

GLAD_API_CALL PROC glad_glIsSampler
    jmp glad_glIsSampler
GLAD_API_CALL ENDP

glIsSampler equ glad_glIsSampler

GLAD_API_CALL PROC glad_glIsShader
    jmp glad_glIsShader
GLAD_API_CALL ENDP

glIsShader equ glad_glIsShader

GLAD_API_CALL PROC glad_glIsSync
    jmp glad_glIsSync
GLAD_API_CALL ENDP

glIsSync equ glad_glIsSync

GLAD_API_CALL PROC glad_glIsTexture
    jmp glad_glIsTexture
GLAD_API_CALL ENDP

glIsTexture equ glad_glIsTexture

GLAD_API_CALL PROC glad_glIsVertexArray
    jmp glad_glIsVertexArray
GLAD_API_CALL ENDP

glIsVertexArray equ glad_glIsVertexArray

GLAD_API_CALL PROC glad_glLineWidth
    jmp glad_glLineWidth
GLAD_API_CALL ENDP

glLineWidth equ glad_glLineWidth

GLAD_API_CALL PROC glad_glLinkProgram
    jmp glad_glLinkProgram
GLAD_API_CALL ENDP

glLinkProgram equ glad_glLinkProgram

GLAD_API_CALL PROC glad_glLogicOp
    jmp glad_glLogicOp
GLAD_API_CALL ENDP

glLogicOp equ glad_glLogicOp

GLAD_API_CALL PROC glad_glMapBuffer
    jmp glad_glMapBuffer
GLAD_API_CALL ENDP

glMapBuffer equ glad_glMapBuffer

GLAD_API_CALL PROC glad_glMapBufferRange
    jmp glad_glMapBufferRange
GLAD_API_CALL ENDP

glMapBufferRange equ glad_glMapBufferRange

GLAD_API_CALL PROC glad_glMultiDrawArrays
    jmp glad_glMultiDrawArrays
GLAD_API_CALL ENDP

glMultiDrawArrays equ glad_glMultiDrawArrays

GLAD_API_CALL PROC glad_glMultiDrawElements
    jmp glad_glMultiDrawElements
GLAD_API_CALL ENDP

glMultiDrawElements equ glad_glMultiDrawElements

GLAD_API_CALL PROC glad_glMultiDrawElementsBaseVertex
    jmp glad_glMultiDrawElementsBaseVertex
GLAD_API_CALL ENDP

glMultiDrawElementsBaseVertex equ glad_glMultiDrawElementsBaseVertex

GLAD_API_CALL PROC glad_glPixelStoref
    jmp glad_glPixelStoref
GLAD_API_CALL ENDP

glPixelStoref equ glad_glPixelStoref

GLAD_API_CALL PROC glad_glPixelStorei
    jmp glad_glPixelStorei
GLAD_API_CALL ENDP

glPixelStorei equ glad_glPixelStorei

GLAD_API_CALL PROC glad_glPointParameterf
    jmp glad_glPointParameterf
GLAD_API_CALL ENDP

glPointParameterf equ glad_glPointParameterf

GLAD_API_CALL PROC glad_glPointParameterfv
    jmp glad_glPointParameterfv
GLAD_API_CALL ENDP

glPointParameterfv equ glad_glPointParameterfv

GLAD_API_CALL PROC glad_glPointParameteri
    jmp glad_glPointParameteri
GLAD_API_CALL ENDP

glPointParameteri equ glad_glPointParameteri

GLAD_API_CALL PROC glad_glPointParameteriv
    jmp glad_glPointParameteriv
GLAD_API_CALL ENDP

glPointParameteriv equ glad_glPointParameteriv

GLAD_API_CALL PROC glad_glPointSize
    jmp glad_glPointSize
GLAD_API_CALL ENDP

glPointSize equ glad_glPointSize

GLAD_API_CALL PROC glad_glPolygonMode
    jmp glad_glPolygonMode
GLAD_API_CALL ENDP

glPolygonMode equ glad_glPolygonMode

GLAD_API_CALL PROC glad_glPolygonOffset
    jmp glad_glPolygonOffset
GLAD_API_CALL ENDP

glPolygonOffset equ glad_glPolygonOffset

GLAD_API_CALL PROC glad_glPrimitiveRestartIndex
    jmp glad_glPrimitiveRestartIndex
GLAD_API_CALL ENDP

glPrimitiveRestartIndex equ glad_glPrimitiveRestartIndex

GLAD_API_CALL PROC glad_glProvokingVertex
    jmp glad_glProvokingVertex
GLAD_API_CALL ENDP

glProvokingVertex equ glad_glProvokingVertex

GLAD_API_CALL PROC glad_glQueryCounter
    jmp glad_glQueryCounter
GLAD_API_CALL ENDP

glQueryCounter equ glad_glQueryCounter

GLAD_API_CALL PROC glad_glReadBuffer
    jmp glad_glReadBuffer
GLAD_API_CALL ENDP

glReadBuffer equ glad_glReadBuffer

GLAD_API_CALL PROC glad_glReadPixels
    jmp glad_glReadPixels
GLAD_API_CALL ENDP

glReadPixels equ glad_glReadPixels

GLAD_API_CALL PROC glad_glRenderbufferStorage
    jmp glad_glRenderbufferStorage
GLAD_API_CALL ENDP

glRenderbufferStorage equ glad_glRenderbufferStorage

GLAD_API_CALL PROC glad_glRenderbufferStorageMultisample
    jmp glad_glRenderbufferStorageMultisample
GLAD_API_CALL ENDP

glRenderbufferStorageMultisample equ glad_glRenderbufferStorageMultisample

GLAD_API_CALL PROC glad_glSampleCoverage
    jmp glad_glSampleCoverage
GLAD_API_CALL ENDP

glSampleCoverage equ glad_glSampleCoverage

GLAD_API_CALL PROC glad_glSampleMaski
    jmp glad_glSampleMaski
GLAD_API_CALL ENDP

glSampleMaski equ glad_glSampleMaski

GLAD_API_CALL PROC glad_glSamplerParameterIiv
    jmp glad_glSamplerParameterIiv
GLAD_API_CALL ENDP

glSamplerParameterIiv equ glad_glSamplerParameterIiv

GLAD_API_CALL PROC glad_glSamplerParameterIuiv
    jmp glad_glSamplerParameterIuiv
GLAD_API_CALL ENDP

glSamplerParameterIuiv equ glad_glSamplerParameterIuiv

GLAD_API_CALL PROC glad_glSamplerParameterf
    jmp glad_glSamplerParameterf
GLAD_API_CALL ENDP

glSamplerParameterf equ glad_glSamplerParameterf

GLAD_API_CALL PROC glad_glSamplerParameterfv
    jmp glad_glSamplerParameterfv
GLAD_API_CALL ENDP

glSamplerParameterfv equ glad_glSamplerParameterfv

GLAD_API_CALL PROC glad_glSamplerParameteri
    jmp glad_glSamplerParameteri
GLAD_API_CALL ENDP

glSamplerParameteri equ glad_glSamplerParameteri

GLAD_API_CALL PROC glad_glSamplerParameteriv
    jmp glad_glSamplerParameteriv
GLAD_API_CALL ENDP

glSamplerParameteriv equ glad_glSamplerParameteriv

GLAD_API_CALL PROC glad_glScissor
    jmp glad_glScissor
GLAD_API_CALL ENDP

glScissor equ glad_glScissor

GLAD_API_CALL PROC glad_glShaderSource
    jmp glad_glShaderSource
GLAD_API_CALL ENDP

glShaderSource equ glad_glShaderSource

GLAD_API_CALL PROC glad_glStencilFunc
    jmp glad_glStencilFunc
GLAD_API_CALL ENDP

glStencilFunc equ glad_glStencilFunc

GLAD_API_CALL PROC glad_glStencilFuncSeparate
    jmp glad_glStencilFuncSeparate
GLAD_API_CALL ENDP

glStencilFuncSeparate equ glad_glStencilFuncSeparate

glStencilFuncSeparate equ glad_glStencilFuncSeparate

GLAD_API_CALL PROC glad_glStencilMask
    jmp glad_glStencilMask
GLAD_API_CALL ENDP

glStencilMask equ glad_glStencilMask

GLAD_API_CALL PROC glad_glStencilMaskSeparate
    jmp glad_glStencilMaskSeparate
GLAD_API_CALL ENDP

glStencilMaskSeparate equ glad_glStencilMaskSeparate

GLAD_API_CALL PROC glad_glStencilOp
    jmp glad_glStencilOp
GLAD_API_CALL ENDP

glStencilOp equ glad_glStencilOp

GLAD_API_CALL PROC glad_glStencilOpSeparate
    jmp glad_glStencilOpSeparate
GLAD_API_CALL ENDP

glStencilOpSeparate equ glad_glStencilOpSeparate

GLAD_API_CALL PROC glad_glTexBuffer
    jmp glad_glTexBuffer
GLAD_API_CALL ENDP

glTexBuffer equ glad_glTexBuffer

GLAD_API_CALL PROC glad_glTexImage1D
    jmp glad_glTexImage1D
GLAD_API_CALL ENDP

glTexImage1D equ glad_glTexImage1D

GLAD_API_CALL PROC glad_glTexImage2D
    jmp glad_glTexImage2D
GLAD_API_CALL ENDP

glTexImage2D equ glad_glTexImage2D

GLAD_API_CALL PROC glad_glTexImage2DMultisample
    jmp glad_glTexImage2DMultisample
GLAD_API_CALL ENDP

glTexImage2DMultisample equ glad_glTexImage2DMultisample

GLAD_API_CALL PROC glad_glTexImage3D
    jmp glad_glTexImage3D
GLAD_API_CALL ENDP

glTexImage3D equ glad_glTexImage3D

GLAD_API_CALL PROC glad_glTexImage3DMultisample
    jmp glad_glTexImage3DMultisample
GLAD_API_CALL ENDP

glTexImage3DMultisample equ glad_glTexImage3DMultisample

GLAD_API_CALL PROC glad_glTexParameterIiv
    jmp glad_glTexParameterIiv
GLAD_API_CALL ENDP

glTexParameterIiv equ glad_glTexParameterIiv

GLAD_API_CALL PROC glad_glTexParameterIuiv
    jmp glad_glTexParameterIuiv
GLAD_API_CALL ENDP

glTexParameterIuiv equ glad_glTexParameterIuiv

GLAD_API_CALL PROC glad_glTexParameterf
    jmp glad_glTexParameterf
GLAD_API_CALL ENDP

glTexParameterf equ glad_glTexParameterf

GLAD_API_CALL PROC glad_glTexParameterfv
    jmp glad_glTexParameterfv
GLAD_API_CALL ENDP

glTexParameterfv equ glad_glTexParameterfv

GLAD_API_CALL PROC glad_glTexParameteri
    jmp glad_glTexParameteri
GLAD_API_CALL ENDP

glTexParameteri equ glad_glTexParameteri

GLAD_API_CALL PROC glad_glTexParameteriv
    jmp glad_glTexParameteriv
GLAD_API_CALL ENDP

glTexParameteriv equ glad_glTexParameteriv

GLAD_API_CALL PROC glad_glTexSubImage1D
    jmp glad_glTexSubImage1D
GLAD_API_CALL ENDP

glTexSubImage1D equ glad_glTexSubImage1D

GLAD_API_CALL PROC glad_glTexSubImage2D
    jmp glad_glTexSubImage2D
GLAD_API_CALL ENDP

glTexSubImage2D equ glad_glTexSubImage2D

GLAD_API_CALL PROC glad_glTexSubImage3D
    jmp glad_glTexSubImage3D
GLAD_API_CALL ENDP

glTexSubImage3D equ glad_glTexSubImage3D

GLAD_API_CALL PROC glad_glTransformFeedbackVaryings
    jmp glad_glTransformFeedbackVaryings
GLAD_API_CALL ENDP

glTransformFeedbackVaryings equ glad_glTransformFeedbackVaryings

GLAD_API_CALL PROC glad_glUniform1f
    jmp glad_glUniform1f
GLAD_API_CALL ENDP

glUniform1f equ glad_glUniform1f

GLAD_API_CALL PROC glad_glUniform1fv
    jmp glad_glUniform1fv
GLAD_API_CALL ENDP

glUniform1fv equ glad_glUniform1fv

glUniform1fv equ glad_glUniform1fv

GLAD_API_CALL PROC glad_glUniform1i
    jmp glad_glUniform1i
GLAD_API_CALL ENDP

glUniform1i equ glad_glUniform1i

GLAD_API_CALL PROC glad_glUniform1iv
    jmp glad_glUniform1iv
GLAD_API_CALL ENDP

glUniform1iv equ glad_glUniform1iv

GLAD_API_CALL PROC glad_glUniform1ui
    jmp glad_glUniform1ui
GLAD_API_CALL ENDP

glUniform1ui equ glad_glUniform1ui

GLAD_API_CALL PROC glad_glUniform1uiv
    jmp glad_glUniform1uiv
GLAD_API_CALL ENDP

glUniform1uiv equ glad_glUniform1uiv

GLAD_API_CALL PROC glad_glUniform2f
    jmp glad_glUniform2f
GLAD_API_CALL ENDP

glUniform2f equ glad_glUniform2f

GLAD_API_CALL PROC glad_glUniform2fv
    jmp glad_glUniform2fv
GLAD_API_CALL ENDP

glUniform2fv equ glad_glUniform2fv

GLAD_API_CALL PROC glad_glUniform2i
    jmp glad_glUniform2i
GLAD_API_CALL ENDP

glUniform2i equ glad_glUniform2i

GLAD_API_CALL PROC glad_glUniform2iv
    jmp glad_glUniform2iv
GLAD_API_CALL ENDP

glUniform2iv equ glad_glUniform2iv

GLAD_API_CALL PROC glad_glUniform2ui
    jmp glad_glUniform2ui
GLAD_API_CALL ENDP

glUniform2ui equ glad_glUniform2ui

GLAD_API_CALL PROC glad_glUniform2uiv
    jmp glad_glUniform2uiv
GLAD_API_CALL ENDP

glUniform2uiv equ glad_glUniform2uiv

GLAD_API_CALL PROC glad_glUniform3f
    jmp glad_glUniform3f
GLAD_API_CALL ENDP

glUniform3f equ glad_glUniform3f

GLAD_API_CALL PROC glad_glUniform3fv
    jmp glad_glUniform3fv
GLAD_API_CALL ENDP

glUniform3fv equ glad_glUniform3fv

GLAD_API_CALL PROC glad_glUniform3i
    jmp glad_glUniform3i
GLAD_API_CALL ENDP

glUniform3i equ glad_glUniform3i

GLAD_API_CALL PROC glad_glUniform3iv
    jmp glad_glUniform3iv
GLAD_API_CALL ENDP

glUniform3iv equ glad_glUniform3iv

GLAD_API_CALL PROC glad_glUniform3ui
    jmp glad_glUniform3ui
GLAD_API_CALL ENDP

glUniform3ui equ glad_glUniform3ui

GLAD_API_CALL PROC glad_glUniform3uiv
    jmp glad_glUniform3uiv
GLAD_API_CALL ENDP

glUniform3uiv equ glad_glUniform3uiv

GLAD_API_CALL PROC glad_glUniform4f
    jmp glad_glUniform4f
GLAD_API_CALL ENDP

glUniform4f equ glad_glUniform4f

GLAD_API_CALL PROC glad_glUniform4fv
    jmp glad_glUniform4fv
GLAD_API_CALL ENDP

glUniform4fv equ glad_glUniform4fv

GLAD_API_CALL PROC glad_glUniform4i
    jmp glad_glUniform4i
GLAD_API_CALL ENDP

glUniform4i equ glad_glUniform4i

GLAD_API_CALL PROC glad_glUniform4iv
    jmp glad_glUniform4iv
GLAD_API_CALL ENDP

glUniform4iv equ glad_glUniform4iv

GLAD_API_CALL PROC glad_glUniform4ui
    jmp glad_glUniform4ui
GLAD_API_CALL ENDP

glUniform4ui equ glad_glUniform4ui

GLAD_API_CALL PROC glad_glUniform4uiv
    jmp glad_glUniform4uiv
GLAD_API_CALL ENDP

glUniform4uiv equ glad_glUniform4uiv

glUniformBlockBinding equ glad_glUniformBlockBinding

GLAD_API_CALL PROC glad_glUniformMatrix2fv
    jmp glad_glUniformMatrix2fv
GLAD_API_CALL ENDP

glUniformMatrix2fv equ glad_glUniformMatrix2fv

GLAD_API_CALL PROC glad_glUniformMatrix2x3fv
    jmp glad_glUniformMatrix2x3fv
GLAD_API_CALL ENDP

glUniformMatrix2x3fv equ glad_glUniformMatrix2x3fv

GLAD_API_CALL PROC glad_glUniformMatrix2x4fv
    jmp glad_glUniformMatrix2x4fv
GLAD_API_CALL ENDP

glUniformMatrix2x4fv equ glad_glUniformMatrix2x4fv

GLAD_API_CALL PROC glad_glUniformMatrix3fv
    jmp glad_glUniformMatrix3fv
GLAD_API_CALL ENDP

glUniformMatrix3fv equ glad_glUniformMatrix3fv

GLAD_API_CALL PROC glad_glUniformMatrix3x2fv
    jmp glad_glUniformMatrix3x2fv
GLAD_API_CALL ENDP

glUniformMatrix3x2fv equ glad_glUniformMatrix3x2fv

GLAD_API_CALL PROC glad_glUniformMatrix3x4fv
    jmp glad_glUniformMatrix3x4fv
GLAD_API_CALL ENDP

glUniformMatrix3x4fv equ glad_glUniformMatrix3x4fv

GLAD_API_CALL PROC glad_glUniformMatrix4fv
    jmp glad_glUniformMatrix4fv
GLAD_API_CALL ENDP

glUniformMatrix4fv equ glad_glUniformMatrix4fv

GLAD_API_CALL PROC glad_glUniformMatrix4x2fv
    jmp glad_glUniformMatrix4x2fv
GLAD_API_CALL ENDP

glUniformMatrix4x2fv equ glad_glUniformMatrix4x2fv

GLAD_API_CALL PROC glad_glUniformMatrix4x3fv
    jmp glad_glUniformMatrix4x3fv
GLAD_API_CALL ENDP

glUniformMatrix4x3fv equ glad_glUniformMatrix4x3fv

GLAD_API_CALL PROC glad_glUnmapBuffer
    jmp glad_glUnmapBuffer
GLAD_API_CALL ENDP

glUnmapBuffer equ glad_glUnmapBuffer

GLAD_API_CALL PROC glad_glUseProgram
    jmp glad_glUseProgram
GLAD_API_CALL ENDP

glUseProgram equ glad_glUseProgram

GLAD_API_CALL PROC glad_glValidateProgram
    jmp glad_glValidateProgram
GLAD_API_CALL ENDP

glValidateProgram equ glad_glValidateProgram

GLAD_API_CALL PROC glad_glVertexAttrib1d
    jmp glad_glVertexAttrib1d
GLAD_API_CALL ENDP

glVertexAttrib1d equ glad_glVertexAttrib1d

GLAD_API_CALL PROC glad_glVertexAttrib1dv
    jmp glad_glVertexAttrib1dv
GLAD_API_CALL ENDP

glVertexAttrib1dv equ glad_glVertexAttrib1dv

GLAD_API_CALL PROC glad_glVertexAttrib1f
    jmp glad_glVertexAttrib1f
GLAD_API_CALL ENDP

glVertexAttrib1f equ glad_glVertexAttrib1f

GLAD_API_CALL PROC glad_glVertexAttrib1fv
    jmp glad_glVertexAttrib1fv
GLAD_API_CALL ENDP

glVertexAttrib1fv equ glad_glVertexAttrib1fv

GLAD_API_CALL PROC glad_glVertexAttrib1s
    jmp glad_glVertexAttrib1s
GLAD_API_CALL ENDP

glVertexAttrib1s equ glad_glVertexAttrib1s

GLAD_API_CALL PROC glad_glVertexAttrib1sv
    jmp glad_glVertexAttrib1sv
GLAD_API_CALL ENDP

glVertexAttrib1sv equ glad_glVertexAttrib1sv

GLAD_API_CALL PROC glad_glVertexAttrib2d
    jmp glad_glVertexAttrib2d
GLAD_API_CALL ENDP

glVertexAttrib2d equ glad_glVertexAttrib2d

GLAD_API_CALL PROC glad_glVertexAttrib2dv
    jmp glad_glVertexAttrib2dv
GLAD_API_CALL ENDP

glVertexAttrib2dv equ glad_glVertexAttrib2dv

GLAD_API_CALL PROC glad_glVertexAttrib2f
    jmp glad_glVertexAttrib2f
GLAD_API_CALL ENDP

glVertexAttrib2f equ glad_glVertexAttrib2f

GLAD_API_CALL PROC glad_glVertexAttrib2fv
    jmp glad_glVertexAttrib2fv
GLAD_API_CALL ENDP

glVertexAttrib2fv equ glad_glVertexAttrib2fv

GLAD_API_CALL PROC glad_glVertexAttrib2s
    jmp glad_glVertexAttrib2s
GLAD_API_CALL ENDP

glVertexAttrib2s equ glad_glVertexAttrib2s

GLAD_API_CALL PROC glad_glVertexAttrib2sv
    jmp glad_glVertexAttrib2sv
GLAD_API_CALL ENDP

glVertexAttrib2sv equ glad_glVertexAttrib2sv

GLAD_API_CALL PROC glad_glVertexAttrib3d
    jmp glad_glVertexAttrib3d
GLAD_API_CALL ENDP

glVertexAttrib3d equ glad_glVertexAttrib3d

GLAD_API_CALL PROC glad_glVertexAttrib3dv
    jmp glad_glVertexAttrib3dv
GLAD_API_CALL ENDP

glVertexAttrib3dv equ glad_glVertexAttrib3dv

GLAD_API_CALL PROC glad_glVertexAttrib3f
    jmp glad_glVertexAttrib3f
GLAD_API_CALL ENDP

glVertexAttrib3f equ glad_glVertexAttrib3f

GLAD_API_CALL PROC glad_glVertexAttrib3fv
    jmp glad_glVertexAttrib3fv
GLAD_API_CALL ENDP

glVertexAttrib3fv equ glad_glVertexAttrib3fv

GLAD_API_CALL PROC glad_glVertexAttrib3s
    jmp glad_glVertexAttrib3s
GLAD_API_CALL ENDP

glVertexAttrib3s equ glad_glVertexAttrib3s

GLAD_API_CALL PROC glad_glVertexAttrib3sv
    jmp glad_glVertexAttrib3sv
GLAD_API_CALL ENDP

glVertexAttrib3sv equ glad_glVertexAttrib3sv

GLAD_API_CALL PROC glad_glVertexAttrib4Nbv
    jmp glad_glVertexAttrib4Nbv
GLAD_API_CALL ENDP

glVertexAttrib4Nbv equ glad_glVertexAttrib4Nbv

GLAD_API_CALL PROC glad_glVertexAttrib4Niv
    jmp glad_glVertexAttrib4Niv
GLAD_API_CALL ENDP

glVertexAttrib4Niv equ glad_glVertexAttrib4Niv

GLAD_API_CALL PROC glad_glVertexAttrib4Nsv
    jmp glad_glVertexAttrib4Nsv
GLAD_API_CALL ENDP

glVertexAttrib4Nsv equ glad_glVertexAttrib4Nsv

GLAD_API_CALL PROC glad_glVertexAttrib4Nub
    jmp glad_glVertexAttrib4Nub
GLAD_API_CALL ENDP

glVertexAttrib4Nub equ glad_glVertexAttrib4Nub

GLAD_API_CALL PROC glad_glVertexAttrib4Nubv
    jmp glad_glVertexAttrib4Nubv
GLAD_API_CALL ENDP

glVertexAttrib4Nubv equ glad_glVertexAttrib4Nubv

GLAD_API_CALL PROC glad_glVertexAttrib4Nuiv
    jmp glad_glVertexAttrib4Nuiv
GLAD_API_CALL ENDP

glVertexAttrib4Nuiv equ glad_glVertexAttrib4Nuiv

GLAD_API_CALL PROC glad_glVertexAttrib4Nusv
    jmp glad_glVertexAttrib4Nusv
GLAD_API_CALL ENDP

glVertexAttrib4Nusv equ glad_glVertexAttrib4Nusv

GLAD_API_CALL PROC glad_glVertexAttrib4bv
    jmp glad_glVertexAttrib4bv
GLAD_API_CALL ENDP

glVertexAttrib4bv equ glad_glVertexAttrib4bv

GLAD_API_CALL PROC glad_glVertexAttrib4d
    jmp glad_glVertexAttrib4d
GLAD_API_CALL ENDP

glVertexAttrib4d equ glad_glVertexAttrib4d

GLAD_API_CALL PROC glad_glVertexAttrib4dv
    jmp glad_glVertexAttrib4dv
GLAD_API_CALL ENDP

glVertexAttrib4dv equ glad_glVertexAttrib4dv

GLAD_API_CALL PROC glad_glVertexAttrib4f
    jmp glad_glVertexAttrib4f
GLAD_API_CALL ENDP

glVertexAttrib4f equ glad_glVertexAttrib4f

GLAD_API_CALL PROC glad_glVertexAttrib4fv
    jmp glad_glVertexAttrib4fv
GLAD_API_CALL ENDP

glVertexAttrib4fv equ glad_glVertexAttrib4fv

GLAD_API_CALL PROC glad_glVertexAttrib4iv
    jmp glad_glVertexAttrib4iv
GLAD_API_CALL ENDP

glVertexAttrib4iv equ glad_glVertexAttrib4iv

GLAD_API_CALL PROC glad_glVertexAttrib4s
    jmp glad_glVertexAttrib4s
GLAD_API_CALL ENDP

glVertexAttrib4s equ glad_glVertexAttrib4s

GLAD_API_CALL PROC glad_glVertexAttrib4sv
    jmp glad_glVertexAttrib4sv
GLAD_API_CALL ENDP

glVertexAttrib4sv equ glad_glVertexAttrib4sv

GLAD_API_CALL PROC glad_glVertexAttrib4ubv
    jmp glad_glVertexAttrib4ubv
GLAD_API_CALL ENDP

glVertexAttrib4ubv equ glad_glVertexAttrib4ubv

GLAD_API_CALL PROC glad_glVertexAttrib4uiv
    jmp glad_glVertexAttrib4uiv
GLAD_API_CALL ENDP

glVertexAttrib4uiv equ glad_glVertexAttrib4uiv

GLAD_API_CALL PROC glad_glVertexAttrib4usv
    jmp glad_glVertexAttrib4usv
GLAD_API_CALL ENDP

glVertexAttrib4usv equ glad_glVertexAttrib4usv

GLAD_API_CALL PROC glad_glVertexAttribDivisor
    jmp glad_glVertexAttribDivisor
GLAD_API_CALL ENDP

glVertexAttribDivisor equ glad_glVertexAttribDivisor

GLAD_API_CALL PROC glad_glVertexAttribI1i
    jmp glad_glVertexAttribI1i
GLAD_API_CALL ENDP

glVertexAttribI1i equ glad_glVertexAttribI1i

GLAD_API_CALL PROC glad_glVertexAttribI1iv
    jmp glad_glVertexAttribI1iv
GLAD_API_CALL ENDP

glVertexAttribI1iv equ glad_glVertexAttribI1iv

GLAD_API_CALL PROC glad_glVertexAttribI1ui
    jmp glad_glVertexAttribI1ui
GLAD_API_CALL ENDP

glVertexAttribI1ui equ glad_glVertexAttribI1ui

GLAD_API_CALL PROC glad_glVertexAttribI1uiv
    jmp glad_glVertexAttribI1uiv
GLAD_API_CALL ENDP

glVertexAttribI1uiv equ glad_glVertexAttribI1uiv

GLAD_API_CALL PROC glad_glVertexAttribI2i
    jmp glad_glVertexAttribI2i
GLAD_API_CALL ENDP

glVertexAttribI2i equ glad_glVertexAttribI2i

GLAD_API_CALL PROC glad_glVertexAttribI2iv
    jmp glad_glVertexAttribI2iv
GLAD_API_CALL ENDP

glVertexAttribI2iv equ glad_glVertexAttribI2iv

GLAD_API_CALL PROC glad_glVertexAttribI2ui
    jmp glad_glVertexAttribI2ui
GLAD_API_CALL ENDP

glVertexAttribI2ui equ glad_glVertexAttribI2ui

GLAD_API_CALL PROC glad_glVertexAttribI2uiv
    jmp glad_glVertexAttribI2uiv
GLAD_API_CALL ENDP

glVertexAttribI2uiv equ glad_glVertexAttribI2uiv

GLAD_API_CALL PROC glad_glVertexAttribI3i
    jmp glad_glVertexAttribI3i
GLAD_API_CALL ENDP

glVertexAttribI3i equ glad_glVertexAttribI3i

GLAD_API_CALL PROC glad_glVertexAttribI3iv
    jmp glad_glVertexAttribI3iv
GLAD_API_CALL ENDP

glVertexAttribI3iv equ glad_glVertexAttribI3iv

GLAD_API_CALL PROC glad_glVertexAttribI3ui
    jmp glad_glVertexAttribI3ui
GLAD_API_CALL ENDP

glVertexAttribI3ui equ glad_glVertexAttribI3ui

GLAD_API_CALL PROC glad_glVertexAttribI3uiv
    jmp glad_glVertexAttribI3uiv
GLAD_API_CALL ENDP

glVertexAttribI3uiv equ glad_glVertexAttribI3uiv

GLAD_API_CALL PROC glad_glVertexAttribI4bv
    jmp glad_glVertexAttribI4bv
GLAD_API_CALL ENDP

glVertexAttribI4bv equ glad_glVertexAttribI4bv

GLAD_API_CALL PROC glad_glVertexAttribI4i
    jmp glad_glVertexAttribI4i
GLAD_API_CALL ENDP

glVertexAttribI4i equ glad_glVertexAttribI4i

GLAD_API_CALL PROC glad_glVertexAttribI4iv
    jmp glad_glVertexAttribI4iv
GLAD_API_CALL ENDP

glVertexAttribI4iv equ glad_glVertexAttribI4iv

GLAD_API_CALL PROC glad_glVertexAttribI4sv
    jmp glad_glVertexAttribI4sv
GLAD_API_CALL ENDP

glVertexAttribI4sv equ glad_glVertexAttribI4sv

GLAD_API_CALL PROC glad_glVertexAttribI4ubv
    jmp glad_glVertexAttribI4ubv
GLAD_API_CALL ENDP

glVertexAttribI4ubv equ glad_glVertexAttribI4ubv

GLAD_API_CALL PROC glad_glVertexAttribI4ui
    jmp glad_glVertexAttribI4ui
GLAD_API_CALL ENDP

glVertexAttribI4ui equ glad_glVertexAttribI4ui

GLAD_API_CALL PROC glad_glVertexAttribI4uiv
    jmp glad_glVertexAttribI4uiv
GLAD_API_CALL ENDP

glVertexAttribI4uiv equ glad_glVertexAttribI4uiv

GLAD_API_CALL PROC glad_glVertexAttribI4usv
    jmp glad_glVertexAttribI4usv
GLAD_API_CALL ENDP

glVertexAttribI4usv equ glad_glVertexAttribI4usv

GLAD_API_CALL PROC glad_glVertexAttribIPointer
    jmp glad_glVertexAttribIPointer
GLAD_API_CALL ENDP

glVertexAttribIPointer equ glad_glVertexAttribIPointer

GLAD_API_CALL PROC glad_glVertexAttribP1ui
    jmp glad_glVertexAttribP1ui
GLAD_API_CALL ENDP

glVertexAttribP1ui equ glad_glVertexAttribP1ui

GLAD_API_CALL PROC glad_glVertexAttribP1uiv
    jmp glad_glVertexAttribP1uiv
GLAD_API_CALL ENDP

glVertexAttribP1uiv equ glad_glVertexAttribP1uiv

GLAD_API_CALL PROC glad_glVertexAttribP2ui
    jmp glad_glVertexAttribP2ui
GLAD_API_CALL ENDP

glVertexAttribP2ui equ glad_glVertexAttribP2ui

GLAD_API_CALL PROC glad_glVertexAttribP2uiv
    jmp glad_glVertexAttribP2uiv
GLAD_API_CALL ENDP

glVertexAttribP2uiv equ glad_glVertexAttribP2uiv

GLAD_API_CALL PROC glad_glVertexAttribP3ui
    jmp glad_glVertexAttribP3ui
GLAD_API_CALL ENDP

glVertexAttribP3ui equ glad_glVertexAttribP3ui

GLAD_API_CALL PROC glad_glVertexAttribP3uiv
    jmp glad_glVertexAttribP3uiv
GLAD_API_CALL ENDP

glVertexAttribP3uiv equ glad_glVertexAttribP3uiv

GLAD_API_CALL PROC glad_glVertexAttribP4ui
    jmp glad_glVertexAttribP4ui
GLAD_API_CALL ENDP

glVertexAttribP4ui equ glad_glVertexAttribP4ui

GLAD_API_CALL PROC glad_glVertexAttribP4uiv
    jmp glad_glVertexAttribP4uiv
GLAD_API_CALL ENDP

glVertexAttribP4uiv equ glad_glVertexAttribP4uiv

GLAD_API_CALL PROC glad_glVertexAttribPointer
    jmp glad_glVertexAttribPointer
GLAD_API_CALL ENDP

glVertexAttribPointer equ glad_glVertexAttribPointer

GLAD_API_CALL PROC glad_glViewport
    jmp glad_glViewport
GLAD_API_CALL ENDP

glViewport equ glad_glViewport

GLAD_API_CALL PROC glad_glWaitSync
    jmp glad_glWaitSync
GLAD_API_CALL ENDP

glWaitSync equ glad_glWaitSync


; gladLoadGLUserPtr
EXTERNDEF gladLoadGLUserPtr :PROC
EXTERNDEF GLADuserptrloadfunc :QWORD
EXTERNDEF GLAD_API_CALL :DWORD

PUBLIC gladLoadGLUserPtr

gladLoadGLUserPtr PROC
    ; Parameters:
    ; RCX: GLADuserptrloadfunc load
    ; RDX: PVOID userptr
    
    mov rax, GLAD_API_CALL
    lea rcx, [rax + gladLoadGLUserPtrOffset]
    call rcx
    
    ret
gladLoadGLUserPtr ENDP

; gladLoadGL
EXTERNDEF gladLoadGL :PROC
EXTERNDEF GLADloadfunc :QWORD
EXTERNDEF GLAD_API_CALL :DWORD

PUBLIC gladLoadGL

gladLoadGL PROC
    ; Parameters:
    ; RCX: GLADloadfunc load
    
    mov rax, GLAD_API_CALL
    lea rcx, [rax + gladLoadGLOffset]
    call rcx
    
    ret
gladLoadGL ENDP

; *
; * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
; *

IFDEF _MSC_VER
GLAD_IMPL_UTIL_SSCANF equ sscanf_s
ELSEIF
GLAD_IMPL_UTIL_SSCANF equ sscanf
ENDIF

GLAD_GL_VERSION_1_0 DD 0
GLAD_GL_VERSION_1_1 DD 0
GLAD_GL_VERSION_1_2 DD 0
GLAD_GL_VERSION_1_3 DD 0
GLAD_GL_VERSION_1_4 DD 0
GLAD_GL_VERSION_1_5 DD 0
GLAD_GL_VERSION_2_0 DD 0
GLAD_GL_VERSION_2_1 DD 0
GLAD_GL_VERSION_3_0 DD 0
GLAD_GL_VERSION_3_1 DD 0
GLAD_GL_VERSION_3_2 DD 0
GLAD_GL_VERSION_3_3 DD 0


EXTERNDEF glad_glActiveTexture:QWORD
EXTERNDEF glad_glAttachShader:QWORD
EXTERNDEF glad_glBeginConditionalRender:QWORD
EXTERNDEF glad_glBeginQuery:QWORD
EXTERNDEF glad_glBeginTransformFeedback:QWORD
EXTERNDEF glad_glBindAttribLocation:QWORD
EXTERNDEF glad_glBindBuffer:QWORD
EXTERNDEF glad_glBindBufferBase:QWORD
EXTERNDEF glad_glBindBufferRange:QWORD
EXTERNDEF glad_glBindFragDataLocation:QWORD
EXTERNDEF glad_glBindFragDataLocationIndexed:QWORD
EXTERNDEF glad_glBindFramebuffer:QWORD
EXTERNDEF glad_glBindRenderbuffer:QWORD
EXTERNDEF glad_glBindSampler:QWORD
EXTERNDEF glad_glBindTexture:QWORD
EXTERNDEF glad_glBindVertexArray:QWORD
EXTERNDEF glad_glBlendColor:QWORD
EXTERNDEF glad_glBlendEquation:QWORD
EXTERNDEF glad_glBlendEquationSeparate:QWORD
EXTERNDEF glad_glBlendFunc:QWORD
EXTERNDEF glad_glBlendFuncSeparate:QWORD
EXTERNDEF glad_glBlitFramebuffer:QWORD
EXTERNDEF glad_glBufferData:QWORD
EXTERNDEF glad_glBufferSubData:QWORD
EXTERNDEF glad_glCheckFramebufferStatus:QWORD
EXTERNDEF glad_glClampColor:QWORD
EXTERNDEF glad_glClear:QWORD
EXTERNDEF glad_glClearBufferfi:QWORD
EXTERNDEF glad_glClearBufferfv:QWORD
EXTERNDEF glad_glClearBufferiv:QWORD
EXTERNDEF glad_glClearBufferuiv:QWORD
EXTERNDEF glad_glClearColor:QWORD
EXTERNDEF glad_glClearDepth:QWORD
EXTERNDEF glad_glClearStencil:QWORD
EXTERNDEF glad_glClientWaitSync:QWORD
EXTERNDEF glad_glColorMask:QWORD
EXTERNDEF glad_glColorMaski:QWORD
EXTERNDEF glad_glCompileShader:QWORD
EXTERNDEF glad_glCompressedTexImage1D:QWORD
EXTERNDEF glad_glCompressedTexImage2D:QWORD
EXTERNDEF glad_glCompressedTexImage3D:QWORD
EXTERNDEF glad_glCompressedTexSubImage1D:QWORD
EXTERNDEF glad_glCompressedTexSubImage2D:QWORD
EXTERNDEF glad_glCompressedTexSubImage3D:QWORD
EXTERNDEF glad_glCopyBufferSubData:QWORD
EXTERNDEF glad_glCopyTexImage1D:QWORD
EXTERNDEF glad_glCopyTexImage2D:QWORD
EXTERNDEF glad_glCopyTexSubImage1D:QWORD
EXTERNDEF glad_glCopyTexSubImage2D:QWORD
EXTERNDEF glad_glCopyTexSubImage3D:QWORD
EXTERNDEF glad_glCreateProgram:QWORD
EXTERNDEF glad_glCreateShader:QWORD
EXTERNDEF glad_glCullFace:QWORD
EXTERNDEF glad_glDeleteBuffers:QWORD
EXTERNDEF glad_glDeleteFramebuffers:QWORD
EXTERNDEF glad_glDeleteProgram:QWORD
EXTERNDEF glad_glDeleteQueries:QWORD
EXTERNDEF glad_glDeleteRenderbuffers:QWORD
EXTERNDEF glad_glDeleteSamplers:QWORD
EXTERNDEF glad_glDeleteShader:QWORD
EXTERNDEF glad_glDeleteSync:QWORD
EXTERNDEF glad_glDeleteTextures:QWORD
EXTERNDEF glad_glDeleteVertexArrays:QWORD
EXTERNDEF glad_glDepthFunc:QWORD
EXTERNDEF glad_glDepthMask:QWORD
EXTERNDEF glad_glDepthRange:QWORD
EXTERNDEF glad_glDetachShader:QWORD
EXTERNDEF glad_glDisable:QWORD
EXTERNDEF glad_glDisableVertexAttribArray:QWORD
EXTERNDEF glad_glDisablei:QWORD
EXTERNDEF glad_glDrawArrays:QWORD
EXTERNDEF glad_glDrawArraysInstanced:QWORD
EXTERNDEF glad_glDrawBuffer:QWORD
EXTERNDEF glad_glDrawBuffers:QWORD
EXTERNDEF glad_glDrawElements:QWORD
EXTERNDEF glad_glDrawElementsBaseVertex:QWORD
EXTERNDEF glad_glDrawElementsInstanced:QWORD
EXTERNDEF glad_glDrawElementsInstancedBaseVertex:QWORD
EXTERNDEF glad_glDrawRangeElements:QWORD
EXTERNDEF glad_glDrawRangeElementsBaseVertex:QWORD
EXTERNDEF glad_glEnable:QWORD
EXTERNDEF glad_glEnableVertexAttribArray:QWORD
EXTERNDEF glad_glEnablei:QWORD
EXTERNDEF glad_glEndConditionalRender:QWORD
EXTERNDEF glad_glEndQuery:QWORD
EXTERNDEF glad_glEndTransformFeedback:QWORD
EXTERNDEF glad_glFenceSync:QWORD
EXTERNDEF glad_glFinish:QWORD
EXTERNDEF glad_glFlush:QWORD
EXTERNDEF glad_glFlushMappedBufferRange:QWORD
EXTERNDEF glad_glFramebufferRenderbuffer:QWORD
EXTERNDEF glad_glFramebufferTexture:QWORD
EXTERNDEF glad_glFramebufferTexture1D:QWORD
EXTERNDEF glad_glFramebufferTexture2D:QWORD
EXTERNDEF glad_glFramebufferTexture3D:QWORD
EXTERNDEF glad_glFramebufferTextureLayer:QWORD
EXTERNDEF glad_glFrontFace:QWORD
EXTERNDEF glad_glGenBuffers:QWORD
EXTERNDEF glad_glGenFramebuffers:QWORD
EXTERNDEF glad_glGenQueries:QWORD
EXTERNDEF glad_glGenRenderbuffers:QWORD
EXTERNDEF glad_glGenSamplers:QWORD
EXTERNDEF glad_glGenTextures:QWORD
EXTERNDEF glad_glGenVertexArrays:QWORD
EXTERNDEF glad_glGenerateMipmap:QWORD
EXTERNDEF glad_glGetActiveAttrib:QWORD
EXTERNDEF glad_glGetActiveUniform:QWORD
EXTERNDEF glad_glGetActiveUniformBlockName:QWORD
EXTERNDEF glad_glGetActiveUniformBlockiv:QWORD
EXTERNDEF glad_glGetActiveUniformName:QWORD
EXTERNDEF glad_glGetActiveUniformsiv:QWORD
EXTERNDEF glad_glGetAttachedShaders:QWORD
glad_glActiveTexture NULL
glad_glAttachShader NULL
glad_glBeginConditionalRender NULL
glad_glBeginQuery NULL
glad_glBeginTransformFeedback NULL
glad_glBindAttribLocation NULL
glad_glBindBuffer NULL
glad_glBindBufferBase NULL
glad_glBindBufferRange NULL
glad_glBindFragDataLocation NULL
glad_glBindFragDataLocationIndexed NULL
glad_glBindFramebuffer NULL
glad_glBindRenderbuffer NULL
glad_glBindSampler NULL
glad_glBindTexture NULL
glad_glBindVertexArray NULL
glad_glBlendColor NULL
glad_glBlendEquation NULL
glad_glBlendEquationSeparate NULL
glad_glBlendFunc NULL
glad_glBlendFuncSeparate NULL
glad_glBlitFramebuffer NULL
glad_glBufferData NULL
glad_glBufferSubData NULL
glad_glCheckFramebufferStatus NULL
glad_glClampColor NULL
glad_glClear NULL
glad_glClearBufferfi NULL
glad_glClearBufferfv NULL
glad_glClearBufferiv NULL
glad_glClearBufferuiv NULL
glad_glClearColor NULL
glad_glClearDepth NULL
glad_glClearStencil NULL
glad_glClientWaitSync NULL
glad_glColorMask NULL
glad_glColorMaski NULL
glad_glCompileShader NULL
glad_glCompressedTexImage1D NULL
glad_glCompressedTexImage2D NULL
glad_glCompressedTexImage3D NULL
glad_glCompressedTexSubImage1D NULL
glad_glCompressedTexSubImage2D NULL
glad_glCompressedTexSubImage3D NULL
glad_glCopyBufferSubData NULL
glad_glCopyTexImage1D NULL
glad_glCopyTexImage2D NULL
glad_glCopyTexSubImage1D NULL
glad_glCopyTexSubImage2D NULL
glad_glCopyTexSubImage3D NULL
glad_glCreateProgram NULL
glad_glCreateShader NULL
glad_glCullFace NULL
glad_glDeleteBuffers NULL
glad_glDeleteFramebuffers NULL
glad_glDeleteProgram NULL
glad_glDeleteQueries NULL
glad_glDeleteRenderbuffers NULL
glad_glDeleteSamplers NULL
glad_glDeleteShader NULL
glad_glDeleteSync NULL
glad_glDeleteTextures NULL
glad_glDeleteVertexArrays NULL
glad_glDepthFunc NULL
glad_glDepthMask NULL
glad_glDepthRange NULL
glad_glDetachShader NULL
glad_glDisable NULL
glad_glDisableVertexAttribArray NULL
glad_glDisablei NULL
glad_glDrawArrays NULL
glad_glDrawArraysInstanced NULL
glad_glDrawBuffer NULL
glad_glDrawBuffers NULL
glad_glDrawElements NULL
glad_glDrawElementsBaseVertex NULL
glad_glDrawElementsInstanced NULL
glad_glDrawElementsInstancedBaseVertex NULL
glad_glDrawRangeElements NULL
glad_glDrawRangeElementsBaseVertex NULL
glad_glEnable NULL
glad_glEnableVertexAttribArray NULL
glad_glEnablei NULL
glad_glEndConditionalRender NULL
glad_glEndQuery NULL
glad_glEndTransformFeedback NULL
glad_glFenceSync NULL
glad_glFinish NULL
glad_glFlush NULL
glad_glFlushMappedBufferRange NULL
glad_glFramebufferRenderbuffer NULL
glad_glFramebufferTexture NULL
glad_glFramebufferTexture1D NULL
glad_glFramebufferTexture2D NULL
glad_glFramebufferTexture3D NULL
glad_glFramebufferTextureLayer NULL
glad_glFrontFace NULL
glad_glGenBuffers NULL
glad_glGenFramebuffers NULL
glad_glGenQueries NULL
glad_glGenRenderbuffers NULL
glad_glGenSamplers NULL
glad_glGenTextures NULL
glad_glGenVertexArrays NULL
glad_glGenerateMipmap NULL
glad_glGetActiveAttrib NULL
glad_glGetActiveUniform NULL
glad_glGetActiveUniformBlockName NULL
glad_glGetActiveUniformBlockiv NULL
glad_glGetActiveUniformName NULL
glad_glGetActiveUniformsiv NULL
glad_glGetAttachedShaders NULL


; Start of untranslated
; Define GLAD_GL_VERSION_1_0 as external variable
EXTERN GLAD_GL_VERSION_1_0:DWORD

; Define the function pointer types as external
EXTERN glad_glBlendFunc:QWORD
EXTERN glad_glClear:QWORD
EXTERN glad_glClearColor:QWORD
EXTERN glad_glClearDepth:QWORD
EXTERN glad_glClearStencil:QWORD
EXTERN glad_glColorMask:QWORD
EXTERN glad_glCullFace:QWORD
EXTERN glad_glDepthFunc:QWORD
EXTERN glad_glDepthMask:QWORD
EXTERN glad_glDepthRange:QWORD
EXTERN glad_glDisable:QWORD
EXTERN glad_glDrawBuffer:QWORD
EXTERN glad_glEnable:QWORD
EXTERN glad_glFinish:QWORD
EXTERN glad_glFlush:QWORD
EXTERN glad_glFrontFace:QWORD
EXTERN glad_glGetBooleanv:QWORD
EXTERN glad_glGetDoublev:QWORD
EXTERN glad_glGetError:QWORD
EXTERN glad_glGetFloatv:QWORD
EXTERN glad_glGetIntegerv:QWORD
EXTERN glad_glGetString:QWORD
EXTERN glad_glGetTexImage:QWORD
EXTERN glad_glGetTexLevelParameterfv:QWORD
EXTERN glad_glGetTexLevelParameteriv:QWORD
EXTERN glad_glGetTexParameterfv:QWORD
EXTERN glad_glGetTexParameteriv:QWORD
EXTERN glad_glHint:QWORD
EXTERN glad_glIsEnabled:QWORD
EXTERN glad_glLineWidth:QWORD
EXTERN glad_glLogicOp:QWORD
EXTERN glad_glPixelStoref:QWORD
EXTERN glad_glPixelStorei:QWORD
EXTERN glad_glPointSize:QWORD
EXTERN glad_glPolygonMode:QWORD
EXTERN glad_glReadBuffer:QWORD
EXTERN glad_glReadPixels:QWORD
EXTERN glad_glScissor:QWORD
EXTERN glad_glStencilFunc:QWORD
EXTERN glad_glStencilMask:QWORD
EXTERN glad_glStencilOp:QWORD
EXTERN glad_glTexImage1D:QWORD
EXTERN glad_glTexImage2D:QWORD
EXTERN glad_glTexParameterf:QWORD
EXTERN glad_glTexParameterfv:QWORD
EXTERN glad_glTexParameteri:QWORD
EXTERN glad_glTexParameteriv:QWORD
EXTERN glad_glViewport:QWORD

.code
glad_gl_load_GL_VERSION_1_0 PROC load:QWORD, userptr:QWORD
    ; Check if GLAD_GL_VERSION_1_0 is not set
    mov eax, GLAD_GL_VERSION_1_0
    test eax, eax
    jz skip_load

    ; Load function pointers using the provided load function
    mov rcx, userptr
    mov rdx, OFFSET glBlendFunc_name
    call [load]
    mov glad_glBlendFunc, rax

    mov rdx, OFFSET glClear_name
    call [load]
    mov glad_glClear, rax

    mov rdx, OFFSET glClearColor_name
    call [load]
    mov glad_glClearColor, rax

    mov rdx, OFFSET glClearDepth_name
    call [load]
    mov glad_glClearDepth, rax

    mov rdx, OFFSET glClearStencil_name
    call [load]
    mov glad_glClearStencil, rax

    mov rdx, OFFSET glColorMask_name
    call [load]
    mov glad_glColorMask, rax

    mov rdx, OFFSET glCullFace_name
    call [load]
    mov glad_glCullFace, rax

    mov rdx, OFFSET glDepthFunc_name
    call [load]
    mov glad_glDepthFunc, rax

    mov rdx, OFFSET glDepthMask_name
    call [load]
    mov glad_glDepthMask, rax

    mov rdx, OFFSET glDepthRange_name
    call [load]
    mov glad_glDepthRange, rax

    mov rdx, OFFSET glDisable_name
    call [load]
    mov glad_glDisable, rax

    mov rdx, OFFSET glDrawBuffer_name
    call [load]
    mov glad_glDrawBuffer, rax

    mov rdx, OFFSET glEnable_name
    call [load]
    mov glad_glEnable, rax

    mov rdx, OFFSET glFinish_name
    call [load]
    mov glad_glFinish, rax

    mov rdx, OFFSET glFlush_name
    call [load]
    mov glad_glFlush, rax

    mov rdx, OFFSET glFrontFace_name
    call [load]
    mov glad_glFrontFace, rax

    mov rdx, OFFSET glGetBooleanv_name
    call [load]
    mov glad_glGetBooleanv, rax

    mov rdx, OFFSET glGetDoublev_name
    call [load]
    mov glad_glGetDoublev, rax

    mov rdx, OFFSET glGetError_name
    call [load]
    mov glad_glGetError, rax

    mov rdx, OFFSET glGetFloatv_name
    call [load]
    mov glad_glGetFloatv, rax

    mov rdx, OFFSET glGetIntegerv_name
    call [load]
    mov glad_glGetIntegerv, rax

    mov rdx, OFFSET glGetString_name
    call [load]
    mov glad_glGetString, rax

    mov rdx, OFFSET glGetTexImage_name
    call [load]
    mov glad_glGetTexImage, rax

    mov rdx, OFFSET glGetTexLevelParameterfv_name
    call [load]
    mov glad_glGetTexLevelParameterfv, rax

    mov rdx, OFFSET glGetTexLevelParameteriv_name
    call [load]
    mov glad_glGetTexLevelParameteriv, rax

    mov rdx, OFFSET glGetTexParameterfv_name
    call [load]
    mov glad_glGetTexParameterfv, rax

    mov rdx, OFFSET glGetTexParameteriv_name
    call [load]
    mov glad_glGetTexParameteriv, rax

    mov rdx, OFFSET glHint_name
    call [load]
    mov glad_glHint, rax

    mov rdx, OFFSET glIsEnabled_name
    call [load]
    mov glad_glIsEnabled, rax

    mov rdx, OFFSET glLineWidth_name
    call [load]
    mov glad_glLineWidth, rax

    mov rdx, OFFSET glLogicOp_name
    call [load]
    mov glad_glLogicOp, rax

    mov rdx, OFFSET glPixelStoref_name
    call [load]
    mov glad_glPixelStoref, rax

    mov rdx, OFFSET glPixelStorei_name
    call [load]
    mov glad_glPixelStorei, rax

    mov rdx, OFFSET glPointSize_name
    call [load]
    mov glad_glPointSize, rax

    mov rdx, OFFSET glPolygonMode_name
    call [load]
    mov glad_glPolygonMode, rax

    mov rdx, OFFSET glReadBuffer_name
    call [load]
    mov glad_glReadBuffer, rax

    mov rdx, OFFSET glReadPixels_name
    call [load]
    mov glad_glReadPixels, rax

    mov rdx, OFFSET glScissor_name
    call [load]
    mov glad_glScissor, rax

    mov rdx, OFFSET glStencilFunc_name
    call [load]
    mov glad_glStencilFunc, rax

    mov rdx, OFFSET glStencilMask_name
    call [load]
    mov glad_glStencilMask, rax

    mov rdx, OFFSET glStencilOp_name
    call [load]
    mov glad_glStencilOp, rax

    mov rdx, OFFSET glTexImage1D_name
    call [load]
    mov glad_glTexImage1D, rax

    mov rdx, OFFSET glTexImage2D_name
    call [load]
    mov glad_glTexImage2D, rax

    mov rdx, OFFSET glTexParameterf_name
    call [load]
    mov glad_glTexParameterf, rax

    mov rdx, OFFSET glTexParameterfv_name
    call [load]
    mov glad_glTexParameterfv, rax

    mov rdx, OFFSET glTexParameteri_name
    call [load]
    mov glad_glTexParameteri, rax

    mov rdx, OFFSET glTexParameteriv_name
    call [load]
    mov glad_glTexParameteriv, rax

    mov rdx, OFFSET glViewport_name
    call [load]
    mov glad_glViewport, rax

skip_load:
    ret
glad_gl_load_GL_VERSION_1_0 ENDP

.data
glBlendFunc_name BYTE "glBlendFunc",0
glClear_name BYTE "glClear",0
glClearColor_name BYTE "glClearColor",0
glClearDepth_name BYTE "glClearDepth",0
glClearStencil_name BYTE "glClearStencil",0
glColorMask_name BYTE "glColorMask",0
glCullFace_name BYTE "glCullFace",0
glDepthFunc_name BYTE "glDepthFunc",0
glDepthMask_name BYTE "glDepthMask",0
glDepthRange_name BYTE "glDepthRange",0
glDisable_name BYTE "glDisable",0
glDrawBuffer_name BYTE "glDrawBuffer",0
glEnable_name BYTE "glEnable",0
glFinish_name BYTE "glFinish",0
glFlush_name BYTE "glFlush",0
glFrontFace_name BYTE "glFrontFace",0
glGetBooleanv_name BYTE "glGetBooleanv",0
glGetDoublev_name BYTE "glGetDoublev",0
glGetError_name BYTE "glGetError",0
glGetFloatv_name BYTE "glGetFloatv",0
glGetIntegerv_name BYTE "glGetIntegerv",0
glGetString_name BYTE "glGetString",0
glGetTexImage_name BYTE "glGetTexImage",0
glGetTexLevelParameterfv_name BYTE "glGetTexLevelParameterfv",0
glGetTexLevelParameteriv_name BYTE "glGetTexLevelParameteriv",0
glGetTexParameterfv_name BYTE "glGetTexParameterfv",0
glGetTexParameteriv_name BYTE "glGetTexParameteriv",0
glHint_name BYTE "glHint",0
glIsEnabled_name BYTE "glIsEnabled",0
glLineWidth_name BYTE "glLineWidth",0
glLogicOp_name BYTE "glLogicOp",0
glPixelStoref_name BYTE "glPixelStoref",0
glPixelStorei_name BYTE "glPixelStorei",0
glPointSize_name BYTE "glPointSize",0
glPolygonMode_name BYTE "glPolygonMode",0
glReadBuffer_name BYTE "glReadBuffer",0
glReadPixels_name BYTE "glReadPixels",0
glScissor_name BYTE "glScissor",0
glStencilFunc_name BYTE "glStencilFunc",0
glStencilMask_name BYTE "glStencilMask",0
glStencilOp_name BYTE "glStencilOp",0
glTexImage1D_name BYTE "glTexImage1D",0
glTexImage2D_name BYTE "glTexImage2D",0
glTexParameterf_name BYTE "glTexParameterf",0
glTexParameterfv_name BYTE "glTexParameterfv",0
glTexParameteri_name BYTE "glTexParameteri",0
glTexParameteriv_name BYTE "glTexParameteriv",0
glViewport_name BYTE "glViewport",0


EXTERN GLAD_GL_VERSION_1_1:DWORD

EXTERN glad_glBindTexture: QWORD
EXTERN glad_glCopyTexImage1D: QWORD
EXTERN glad_glCopyTexImage2D: QWORD
EXTERN glad_glCopyTexSubImage1D: QWORD
EXTERN glad_glCopyTexSubImage2D: QWORD
EXTERN glad_glDeleteTextures: QWORD
EXTERN glad_glDrawArrays: QWORD
EXTERN glad_glDrawElements: QWORD
EXTERN glad_glGenTextures: QWORD
EXTERN glad_glIsTexture: QWORD
EXTERN glad_glPolygonOffset: QWORD
EXTERN glad_glTexSubImage1D: QWORD
EXTERN glad_glTexSubImage2D: QWORD

glad_gl_load_GL_VERSION_1_1 PROC load:QWORD, userptr:QWORD
    ; Check if GLAD_GL_VERSION_1_1 is loaded
    cmp byte ptr [GLAD_GL_VERSION_1_1], 0
    je .done
    
    ; Load the function pointers
    mov rcx, userptr
    mov rdx, OFFSET "glBindTexture"
    call qword ptr [load]
    mov qword ptr [glad_glBindTexture], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glCopyTexImage1D"
    call qword ptr [load]
    mov qword ptr [glad_glCopyTexImage1D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glCopyTexImage2D"
    call qword ptr [load]
    mov qword ptr [glad_glCopyTexImage2D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glCopyTexSubImage1D"
    call qword ptr [load]
    mov qword ptr [glad_glCopyTexSubImage1D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glCopyTexSubImage2D"
    call qword ptr [load]
    mov qword ptr [glad_glCopyTexSubImage2D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glDeleteTextures"
    call qword ptr [load]
    mov qword ptr [glad_glDeleteTextures], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glDrawArrays"
    call qword ptr [load]
    mov qword ptr [glad_glDrawArrays], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glDrawElements"
    call qword ptr [load]
    mov qword ptr [glad_glDrawElements], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glGenTextures"
    call qword ptr [load]
    mov qword ptr [glad_glGenTextures], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glIsTexture"
    call qword ptr [load]
    mov qword ptr [glad_glIsTexture], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glPolygonOffset"
    call qword ptr [load]
    mov qword ptr [glad_glPolygonOffset], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glTexSubImage1D"
    call qword ptr [load]
    mov qword ptr [glad_glTexSubImage1D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glTexSubImage2D"
    call qword ptr [load]
    mov qword ptr [glad_glTexSubImage2D], rax

.done:
    ret
glad_gl_load_GL_VERSION_1_1 ENDP


EXTERN GLAD_GL_VERSION_1_2:DWORD

EXTERN glad_glCopyTexSubImage3D: QWORD
EXTERN glad_glDrawRangeElements: QWORD
EXTERN glad_glTexImage3D: QWORD
EXTERN glad_glTexSubImage3D: QWORD

glad_gl_load_GL_VERSION_1_2 PROC load:QWORD, userptr:QWORD
    ; Check if GLAD_GL_VERSION_1_2 is loaded
    cmp byte ptr [GLAD_GL_VERSION_1_2], 0
    je .done
    
    ; Load the function pointers
    mov rcx, userptr
    mov rdx, OFFSET "glCopyTexSubImage3D"
    call qword ptr [load]
    mov qword ptr [glad_glCopyTexSubImage3D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glDrawRangeElements"
    call qword ptr [load]
    mov qword ptr [glad_glDrawRangeElements], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glTexImage3D"
    call qword ptr [load]
    mov qword ptr [glad_glTexImage3D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glTexSubImage3D"
    call qword ptr [load]
    mov qword ptr [glad_glTexSubImage3D], rax

.done:
    ret
glad_gl_load_GL_VERSION_1_2 ENDP


EXTERN GLAD_GL_VERSION_1_3:DWORD

EXTERN glad_glActiveTexture: QWORD
EXTERN glad_glCompressedTexImage1D: QWORD
EXTERN glad_glCompressedTexImage2D: QWORD
EXTERN glad_glCompressedTexImage3D: QWORD
EXTERN glad_glCompressedTexSubImage1D: QWORD
EXTERN glad_glCompressedTexSubImage2D: QWORD
EXTERN glad_glCompressedTexSubImage3D: QWORD
EXTERN glad_glGetCompressedTexImage: QWORD
EXTERN glad_glSampleCoverage: QWORD

glad_gl_load_GL_VERSION_1_3 PROC load:QWORD, userptr:QWORD
    ; Check if GLAD_GL_VERSION_1_3 is loaded
    cmp byte ptr [GLAD_GL_VERSION_1_3], 0
    je .done
    
    ; Load the function pointers
    mov rcx, userptr
    mov rdx, OFFSET "glActiveTexture"
    call qword ptr [load]
    mov qword ptr [glad_glActiveTexture], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glCompressedTexImage1D"
    call qword ptr [load]
    mov qword ptr [glad_glCompressedTexImage1D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glCompressedTexImage2D"
    call qword ptr [load]
    mov qword ptr [glad_glCompressedTexImage2D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glCompressedTexImage3D"
    call qword ptr [load]
    mov qword ptr [glad_glCompressedTexImage3D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glCompressedTexSubImage1D"
    call qword ptr [load]
    mov qword ptr [glad_glCompressedTexSubImage1D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glCompressedTexSubImage2D"
    call qword ptr [load]
    mov qword ptr [glad_glCompressedTexSubImage2D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glCompressedTexSubImage3D"
    call qword ptr [load]
    mov qword ptr [glad_glCompressedTexSubImage3D], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glGetCompressedTexImage"
    call qword ptr [load]
    mov qword ptr [glad_glGetCompressedTexImage], rax
    
    mov rcx, userptr
    mov rdx, OFFSET "glSampleCoverage"
    call qword ptr [load]
    mov qword ptr [glad_glSampleCoverage], rax

.done:
    ret
glad_gl_load_GL_VERSION_1_3 ENDP


EXTERN GLAD_GL_VERSION_1_4:DWORD

EXTERN glad_glBlendColor: QWORD
EXTERN glad_glBlendEquation: QWORD
EXTERN glad_glBlendFuncSeparate: QWORD
EXTERN glad_glMultiDrawArrays: QWORD
EXTERN glad_glMultiDrawElements: QWORD
EXTERN glad_glPointParameterf: QWORD
EXTERN glad_glPointParameterfv: QWORD
EXTERN glad_glPointParameteri: QWORD
EXTERN glad_glPointParameteriv: QWORD

glad_gl_load_GL_VERSION_1_4 PROC load:QWORD, userptr:QWORD
    ; Check if GLAD_GL_VERSION_1_4 is loaded
    cmp byte ptr [GLAD_GL_VERSION_1_4], 0
    je .done

    ; Load the function pointers
    mov rcx, userptr
    mov rdx, OFFSET "glBlendColor"
    call qword ptr [load]
    mov qword ptr [glad_glBlendColor], rax

    mov rcx, userptr
    mov rdx, OFFSET "glBlendEquation"
    call qword ptr [load]
    mov qword ptr [glad_glBlendEquation], rax

    mov rcx, userptr
    mov rdx, OFFSET "glBlendFuncSeparate"
    call qword ptr [load]
    mov qword ptr [glad_glBlendFuncSeparate], rax

    mov rcx, userptr
    mov rdx, OFFSET "glMultiDrawArrays"
    call qword ptr [load]
    mov qword ptr [glad_glMultiDrawArrays], rax

    mov rcx, userptr
    mov rdx, OFFSET "glMultiDrawElements"
    call qword ptr [load]
    mov qword ptr [glad_glMultiDrawElements], rax

    mov rcx, userptr
    mov rdx, OFFSET "glPointParameterf"
    call qword ptr [load]
    mov qword ptr [glad_glPointParameterf], rax

    mov rcx, userptr
    mov rdx, OFFSET "glPointParameterfv"
    call qword ptr [load]
    mov qword ptr [glad_glPointParameterfv], rax

    mov rcx, userptr
    mov rdx, OFFSET "glPointParameteri"
    call qword ptr [load]
    mov qword ptr [glad_glPointParameteri], rax

    mov rcx, userptr
    mov rdx, OFFSET "glPointParameteriv"
    call qword ptr [load]
    mov qword ptr [glad_glPointParameteriv], rax

.done:
    ret
glad_gl_load_GL_VERSION_1_4 ENDP


EXTERN GLAD_GL_VERSION_1_5:DWORD

EXTERN glad_glBeginQuery: QWORD
EXTERN glad_glBindBuffer: QWORD
EXTERN glad_glBufferData: QWORD
EXTERN glad_glBufferSubData: QWORD
EXTERN glad_glDeleteBuffers: QWORD
EXTERN glad_glDeleteQueries: QWORD
EXTERN glad_glEndQuery: QWORD
EXTERN glad_glGenBuffers: QWORD
EXTERN glad_glGenQueries: QWORD
EXTERN glad_glGetBufferParameteriv: QWORD
EXTERN glad_glGetBufferPointerv: QWORD
EXTERN glad_glGetBufferSubData: QWORD
EXTERN glad_glGetQueryObjectiv: QWORD
EXTERN glad_glGetQueryObjectuiv: QWORD
EXTERN glad_glGetQueryiv: QWORD
EXTERN glad_glIsBuffer: QWORD
EXTERN glad_glIsQuery: QWORD
EXTERN glad_glMapBuffer: QWORD
EXTERN glad_glUnmapBuffer: QWORD

glad_gl_load_GL_VERSION_1_5 PROC load:QWORD, userptr:QWORD
    ; Check if GLAD_GL_VERSION_1_5 is loaded
    cmp byte ptr [GLAD_GL_VERSION_1_5], 0
    je .done

    ; Load the function pointers
    mov rcx, userptr
    mov rdx, OFFSET "glBeginQuery"
    call qword ptr [load]
    mov qword ptr [glad_glBeginQuery], rax

    mov rcx, userptr
    mov rdx, OFFSET "glBindBuffer"
    call qword ptr [load]
    mov qword ptr [glad_glBindBuffer], rax

    mov rcx, userptr
    mov rdx, OFFSET "glBufferData"
    call qword ptr [load]
    mov qword ptr [glad_glBufferData], rax

    mov rcx, userptr
    mov rdx, OFFSET "glBufferSubData"
    call qword ptr [load]
    mov qword ptr [glad_glBufferSubData], rax

    mov rcx, userptr
    mov rdx, OFFSET "glDeleteBuffers"
    call qword ptr [load]
    mov qword ptr [glad_glDeleteBuffers], rax

    mov rcx, userptr
    mov rdx, OFFSET "glDeleteQueries"
    call qword ptr [load]
    mov qword ptr [glad_glDeleteQueries], rax

    mov rcx, userptr
    mov rdx, OFFSET "glEndQuery"
    call qword ptr [load]
    mov qword ptr [glad_glEndQuery], rax

    mov rcx, userptr
    mov rdx, OFFSET "glGenBuffers"
    call qword ptr [load]
    mov qword ptr [glad_glGenBuffers], rax

    mov rcx, userptr
    mov rdx, OFFSET "glGenQueries"
    call qword ptr [load]
    mov qword ptr [glad_glGenQueries], rax

    mov rcx, userptr
    mov rdx, OFFSET "glGetBufferParameteriv"
    call qword ptr [load]
    mov qword ptr [glad_glGetBufferParameteriv], rax

    mov rcx, userptr
    mov rdx, OFFSET "glGetBufferPointerv"
    call qword ptr [load]
    mov qword ptr [glad_glGetBufferPointerv], rax

    mov rcx, userptr
    mov rdx, OFFSET "glGetBufferSubData"
    call qword ptr [load]
    mov qword ptr [glad_glGetBufferSubData], rax

    mov rcx, userptr
    mov rdx, OFFSET "glGetQueryObjectiv"
    call qword ptr [load]
    mov qword ptr [glad_glGetQueryObjectiv], rax

    mov rcx, userptr
    mov rdx, OFFSET "glGetQueryObjectuiv"
    call qword ptr [load]
    mov qword ptr [glad_glGetQueryObjectuiv], rax

    mov rcx, userptr
    mov rdx, OFFSET "glGetQueryiv"
    call qword ptr [load]
    mov qword ptr [glad_glGetQueryiv], rax

    mov rcx, userptr
    mov rdx, OFFSET "glIsBuffer"
    call qword ptr [load]
    mov qword ptr [glad_glIsBuffer], rax

    mov rcx, userptr
    mov rdx, OFFSET "glIsQuery"
    call qword ptr [load]
    mov qword ptr [glad_glIsQuery], rax

    mov rcx, userptr
    mov rdx, OFFSET "glMapBuffer"
    call qword ptr [load]
    mov qword ptr [glad_glMapBuffer], rax

    mov rcx, userptr
    mov rdx, OFFSET "glUnmapBuffer"
    call qword ptr [load]
    mov qword ptr [glad_glUnmapBuffer], rax

.done:
    ret
glad_gl_load_GL_VERSION_1_5 ENDP

; The rest, untranslated past this comment


static void glad_gl_load_GL_VERSION_2_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_2_0) return;
    glad_glAttachShader = (PFNGLATTACHSHADERPROC) load(userptr, "glAttachShader");
    glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) load(userptr, "glBindAttribLocation");
    glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) load(userptr, "glBlendEquationSeparate");
    glad_glCompileShader = (PFNGLCOMPILESHADERPROC) load(userptr, "glCompileShader");
    glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC) load(userptr, "glCreateProgram");
    glad_glCreateShader = (PFNGLCREATESHADERPROC) load(userptr, "glCreateShader");
    glad_glDeleteProgram = (PFNGLDELETEPROGRAMPROC) load(userptr, "glDeleteProgram");
    glad_glDeleteShader = (PFNGLDELETESHADERPROC) load(userptr, "glDeleteShader");
    glad_glDetachShader = (PFNGLDETACHSHADERPROC) load(userptr, "glDetachShader");
    glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) load(userptr, "glDisableVertexAttribArray");
    glad_glDrawBuffers = (PFNGLDRAWBUFFERSPROC) load(userptr, "glDrawBuffers");
    glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) load(userptr, "glEnableVertexAttribArray");
    glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) load(userptr, "glGetActiveAttrib");
    glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) load(userptr, "glGetActiveUniform");
    glad_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) load(userptr, "glGetAttachedShaders");
    glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) load(userptr, "glGetAttribLocation");
    glad_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) load(userptr, "glGetProgramInfoLog");
    glad_glGetProgramiv = (PFNGLGETPROGRAMIVPROC) load(userptr, "glGetProgramiv");
    glad_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) load(userptr, "glGetShaderInfoLog");
    glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC) load(userptr, "glGetShaderSource");
    glad_glGetShaderiv = (PFNGLGETSHADERIVPROC) load(userptr, "glGetShaderiv");
    glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) load(userptr, "glGetUniformLocation");
    glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC) load(userptr, "glGetUniformfv");
    glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC) load(userptr, "glGetUniformiv");
    glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load(userptr, "glGetVertexAttribPointerv");
    glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) load(userptr, "glGetVertexAttribdv");
    glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load(userptr, "glGetVertexAttribfv");
    glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load(userptr, "glGetVertexAttribiv");
    glad_glIsProgram = (PFNGLISPROGRAMPROC) load(userptr, "glIsProgram");
    glad_glIsShader = (PFNGLISSHADERPROC) load(userptr, "glIsShader");
    glad_glLinkProgram = (PFNGLLINKPROGRAMPROC) load(userptr, "glLinkProgram");
    glad_glShaderSource = (PFNGLSHADERSOURCEPROC) load(userptr, "glShaderSource");
    glad_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) load(userptr, "glStencilFuncSeparate");
    glad_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) load(userptr, "glStencilMaskSeparate");
    glad_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) load(userptr, "glStencilOpSeparate");
    glad_glUniform1f = (PFNGLUNIFORM1FPROC) load(userptr, "glUniform1f");
    glad_glUniform1fv = (PFNGLUNIFORM1FVPROC) load(userptr, "glUniform1fv");
    glad_glUniform1i = (PFNGLUNIFORM1IPROC) load(userptr, "glUniform1i");
    glad_glUniform1iv = (PFNGLUNIFORM1IVPROC) load(userptr, "glUniform1iv");
    glad_glUniform2f = (PFNGLUNIFORM2FPROC) load(userptr, "glUniform2f");
    glad_glUniform2fv = (PFNGLUNIFORM2FVPROC) load(userptr, "glUniform2fv");
    glad_glUniform2i = (PFNGLUNIFORM2IPROC) load(userptr, "glUniform2i");
    glad_glUniform2iv = (PFNGLUNIFORM2IVPROC) load(userptr, "glUniform2iv");
    glad_glUniform3f = (PFNGLUNIFORM3FPROC) load(userptr, "glUniform3f");
    glad_glUniform3fv = (PFNGLUNIFORM3FVPROC) load(userptr, "glUniform3fv");
    glad_glUniform3i = (PFNGLUNIFORM3IPROC) load(userptr, "glUniform3i");
    glad_glUniform3iv = (PFNGLUNIFORM3IVPROC) load(userptr, "glUniform3iv");
    glad_glUniform4f = (PFNGLUNIFORM4FPROC) load(userptr, "glUniform4f");
    glad_glUniform4fv = (PFNGLUNIFORM4FVPROC) load(userptr, "glUniform4fv");
    glad_glUniform4i = (PFNGLUNIFORM4IPROC) load(userptr, "glUniform4i");
    glad_glUniform4iv = (PFNGLUNIFORM4IVPROC) load(userptr, "glUniform4iv");
    glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) load(userptr, "glUniformMatrix2fv");
    glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) load(userptr, "glUniformMatrix3fv");
    glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) load(userptr, "glUniformMatrix4fv");
    glad_glUseProgram = (PFNGLUSEPROGRAMPROC) load(userptr, "glUseProgram");
    glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC) load(userptr, "glValidateProgram");
    glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) load(userptr, "glVertexAttrib1d");
    glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) load(userptr, "glVertexAttrib1dv");
    glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load(userptr, "glVertexAttrib1f");
    glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load(userptr, "glVertexAttrib1fv");
    glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) load(userptr, "glVertexAttrib1s");
    glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) load(userptr, "glVertexAttrib1sv");
    glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) load(userptr, "glVertexAttrib2d");
    glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) load(userptr, "glVertexAttrib2dv");
    glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load(userptr, "glVertexAttrib2f");
    glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load(userptr, "glVertexAttrib2fv");
    glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) load(userptr, "glVertexAttrib2s");
    glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) load(userptr, "glVertexAttrib2sv");
    glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) load(userptr, "glVertexAttrib3d");
    glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) load(userptr, "glVertexAttrib3dv");
    glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load(userptr, "glVertexAttrib3f");
    glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load(userptr, "glVertexAttrib3fv");
    glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) load(userptr, "glVertexAttrib3s");
    glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) load(userptr, "glVertexAttrib3sv");
    glad_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC) load(userptr, "glVertexAttrib4Nbv");
    glad_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC) load(userptr, "glVertexAttrib4Niv");
    glad_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC) load(userptr, "glVertexAttrib4Nsv");
    glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) load(userptr, "glVertexAttrib4Nub");
    glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) load(userptr, "glVertexAttrib4Nubv");
    glad_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC) load(userptr, "glVertexAttrib4Nuiv");
    glad_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC) load(userptr, "glVertexAttrib4Nusv");
    glad_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC) load(userptr, "glVertexAttrib4bv");
    glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) load(userptr, "glVertexAttrib4d");
    glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) load(userptr, "glVertexAttrib4dv");
    glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load(userptr, "glVertexAttrib4f");
    glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load(userptr, "glVertexAttrib4fv");
    glad_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC) load(userptr, "glVertexAttrib4iv");
    glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) load(userptr, "glVertexAttrib4s");
    glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) load(userptr, "glVertexAttrib4sv");
    glad_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC) load(userptr, "glVertexAttrib4ubv");
    glad_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC) load(userptr, "glVertexAttrib4uiv");
    glad_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC) load(userptr, "glVertexAttrib4usv");
    glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) load(userptr, "glVertexAttribPointer");
}
static void glad_gl_load_GL_VERSION_2_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_2_1) return;
    glad_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) load(userptr, "glUniformMatrix2x3fv");
    glad_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) load(userptr, "glUniformMatrix2x4fv");
    glad_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) load(userptr, "glUniformMatrix3x2fv");
    glad_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) load(userptr, "glUniformMatrix3x4fv");
    glad_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) load(userptr, "glUniformMatrix4x2fv");
    glad_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) load(userptr, "glUniformMatrix4x3fv");
}
static void glad_gl_load_GL_VERSION_3_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_0) return;
    glad_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC) load(userptr, "glBeginConditionalRender");
    glad_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) load(userptr, "glBeginTransformFeedback");
    glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    glad_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC) load(userptr, "glBindFragDataLocation");
    glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load(userptr, "glBindFramebuffer");
    glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load(userptr, "glBindRenderbuffer");
    glad_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) load(userptr, "glBindVertexArray");
    glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load(userptr, "glBlitFramebuffer");
    glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    glad_glClampColor = (PFNGLCLAMPCOLORPROC) load(userptr, "glClampColor");
    glad_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC) load(userptr, "glClearBufferfi");
    glad_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC) load(userptr, "glClearBufferfv");
    glad_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC) load(userptr, "glClearBufferiv");
    glad_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) load(userptr, "glClearBufferuiv");
    glad_glColorMaski = (PFNGLCOLORMASKIPROC) load(userptr, "glColorMaski");
    glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) load(userptr, "glDeleteVertexArrays");
    glad_glDisablei = (PFNGLDISABLEIPROC) load(userptr, "glDisablei");
    glad_glEnablei = (PFNGLENABLEIPROC) load(userptr, "glEnablei");
    glad_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC) load(userptr, "glEndConditionalRender");
    glad_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) load(userptr, "glEndTransformFeedback");
    glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) load(userptr, "glFlushMappedBufferRange");
    glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) load(userptr, "glFramebufferTexture1D");
    glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) load(userptr, "glFramebufferTexture3D");
    glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) load(userptr, "glGenVertexArrays");
    glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    glad_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC) load(userptr, "glGetBooleani_v");
    glad_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) load(userptr, "glGetFragDataLocation");
    glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    glad_glGetStringi = (PFNGLGETSTRINGIPROC) load(userptr, "glGetStringi");
    glad_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC) load(userptr, "glGetTexParameterIiv");
    glad_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC) load(userptr, "glGetTexParameterIuiv");
    glad_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) load(userptr, "glGetTransformFeedbackVarying");
    glad_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC) load(userptr, "glGetUniformuiv");
    glad_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) load(userptr, "glGetVertexAttribIiv");
    glad_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) load(userptr, "glGetVertexAttribIuiv");
    glad_glIsEnabledi = (PFNGLISENABLEDIPROC) load(userptr, "glIsEnabledi");
    glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC) load(userptr, "glIsVertexArray");
    glad_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) load(userptr, "glMapBufferRange");
    glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glRenderbufferStorageMultisample");
    glad_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC) load(userptr, "glTexParameterIiv");
    glad_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC) load(userptr, "glTexParameterIuiv");
    glad_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) load(userptr, "glTransformFeedbackVaryings");
    glad_glUniform1ui = (PFNGLUNIFORM1UIPROC) load(userptr, "glUniform1ui");
    glad_glUniform1uiv = (PFNGLUNIFORM1UIVPROC) load(userptr, "glUniform1uiv");
    glad_glUniform2ui = (PFNGLUNIFORM2UIPROC) load(userptr, "glUniform2ui");
    glad_glUniform2uiv = (PFNGLUNIFORM2UIVPROC) load(userptr, "glUniform2uiv");
    glad_glUniform3ui = (PFNGLUNIFORM3UIPROC) load(userptr, "glUniform3ui");
    glad_glUniform3uiv = (PFNGLUNIFORM3UIVPROC) load(userptr, "glUniform3uiv");
    glad_glUniform4ui = (PFNGLUNIFORM4UIPROC) load(userptr, "glUniform4ui");
    glad_glUniform4uiv = (PFNGLUNIFORM4UIVPROC) load(userptr, "glUniform4uiv");
    glad_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC) load(userptr, "glVertexAttribI1i");
    glad_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC) load(userptr, "glVertexAttribI1iv");
    glad_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC) load(userptr, "glVertexAttribI1ui");
    glad_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC) load(userptr, "glVertexAttribI1uiv");
    glad_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC) load(userptr, "glVertexAttribI2i");
    glad_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC) load(userptr, "glVertexAttribI2iv");
    glad_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC) load(userptr, "glVertexAttribI2ui");
    glad_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC) load(userptr, "glVertexAttribI2uiv");
    glad_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC) load(userptr, "glVertexAttribI3i");
    glad_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC) load(userptr, "glVertexAttribI3iv");
    glad_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC) load(userptr, "glVertexAttribI3ui");
    glad_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC) load(userptr, "glVertexAttribI3uiv");
    glad_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC) load(userptr, "glVertexAttribI4bv");
    glad_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) load(userptr, "glVertexAttribI4i");
    glad_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) load(userptr, "glVertexAttribI4iv");
    glad_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC) load(userptr, "glVertexAttribI4sv");
    glad_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC) load(userptr, "glVertexAttribI4ubv");
    glad_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) load(userptr, "glVertexAttribI4ui");
    glad_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) load(userptr, "glVertexAttribI4uiv");
    glad_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC) load(userptr, "glVertexAttribI4usv");
    glad_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) load(userptr, "glVertexAttribIPointer");
}
static void glad_gl_load_GL_VERSION_3_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_1) return;
    glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    glad_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load(userptr, "glCopyBufferSubData");
    glad_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) load(userptr, "glDrawArraysInstanced");
    glad_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) load(userptr, "glDrawElementsInstanced");
    glad_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) load(userptr, "glGetActiveUniformBlockName");
    glad_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) load(userptr, "glGetActiveUniformBlockiv");
    glad_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) load(userptr, "glGetActiveUniformName");
    glad_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) load(userptr, "glGetActiveUniformsiv");
    glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    glad_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) load(userptr, "glGetUniformBlockIndex");
    glad_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) load(userptr, "glGetUniformIndices");
    glad_glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC) load(userptr, "glPrimitiveRestartIndex");
    glad_glTexBuffer = (PFNGLTEXBUFFERPROC) load(userptr, "glTexBuffer");
    glad_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) load(userptr, "glUniformBlockBinding");
}
static void glad_gl_load_GL_VERSION_3_2( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_2) return;
    glad_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) load(userptr, "glClientWaitSync");
    glad_glDeleteSync = (PFNGLDELETESYNCPROC) load(userptr, "glDeleteSync");
    glad_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glDrawElementsBaseVertex");
    glad_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) load(userptr, "glDrawElementsInstancedBaseVertex");
    glad_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) load(userptr, "glDrawRangeElementsBaseVertex");
    glad_glFenceSync = (PFNGLFENCESYNCPROC) load(userptr, "glFenceSync");
    glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) load(userptr, "glFramebufferTexture");
    glad_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) load(userptr, "glGetBufferParameteri64v");
    glad_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC) load(userptr, "glGetInteger64i_v");
    glad_glGetInteger64v = (PFNGLGETINTEGER64VPROC) load(userptr, "glGetInteger64v");
    glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) load(userptr, "glGetMultisamplefv");
    glad_glGetSynciv = (PFNGLGETSYNCIVPROC) load(userptr, "glGetSynciv");
    glad_glIsSync = (PFNGLISSYNCPROC) load(userptr, "glIsSync");
    glad_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glMultiDrawElementsBaseVertex");
    glad_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) load(userptr, "glProvokingVertex");
    glad_glSampleMaski = (PFNGLSAMPLEMASKIPROC) load(userptr, "glSampleMaski");
    glad_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) load(userptr, "glTexImage2DMultisample");
    glad_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) load(userptr, "glTexImage3DMultisample");
    glad_glWaitSync = (PFNGLWAITSYNCPROC) load(userptr, "glWaitSync");
}
static void glad_gl_load_GL_VERSION_3_3( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_3) return;
    glad_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) load(userptr, "glBindFragDataLocationIndexed");
    glad_glBindSampler = (PFNGLBINDSAMPLERPROC) load(userptr, "glBindSampler");
    glad_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) load(userptr, "glDeleteSamplers");
    glad_glGenSamplers = (PFNGLGENSAMPLERSPROC) load(userptr, "glGenSamplers");
    glad_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC) load(userptr, "glGetFragDataIndex");
    glad_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC) load(userptr, "glGetQueryObjecti64v");
    glad_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) load(userptr, "glGetQueryObjectui64v");
    glad_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) load(userptr, "glGetSamplerParameterIiv");
    glad_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) load(userptr, "glGetSamplerParameterIuiv");
    glad_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) load(userptr, "glGetSamplerParameterfv");
    glad_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) load(userptr, "glGetSamplerParameteriv");
    glad_glIsSampler = (PFNGLISSAMPLERPROC) load(userptr, "glIsSampler");
    glad_glQueryCounter = (PFNGLQUERYCOUNTERPROC) load(userptr, "glQueryCounter");
    glad_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) load(userptr, "glSamplerParameterIiv");
    glad_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) load(userptr, "glSamplerParameterIuiv");
    glad_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) load(userptr, "glSamplerParameterf");
    glad_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) load(userptr, "glSamplerParameterfv");
    glad_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) load(userptr, "glSamplerParameteri");
    glad_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) load(userptr, "glSamplerParameteriv");
    glad_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) load(userptr, "glVertexAttribDivisor");
    glad_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC) load(userptr, "glVertexAttribP1ui");
    glad_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC) load(userptr, "glVertexAttribP1uiv");
    glad_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC) load(userptr, "glVertexAttribP2ui");
    glad_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC) load(userptr, "glVertexAttribP2uiv");
    glad_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC) load(userptr, "glVertexAttribP3ui");
    glad_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC) load(userptr, "glVertexAttribP3uiv");
    glad_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC) load(userptr, "glVertexAttribP4ui");
    glad_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC) load(userptr, "glVertexAttribP4uiv");
}



static void glad_gl_free_extensions(char **exts_i) {
    if (exts_i != NULL) {
        unsigned int index;
        for(index = 0; exts_i[index]; index++) {
            free((void *) (exts_i[index]));
        }
        free((void *)exts_i);
        exts_i = NULL;
    }
}
static int glad_gl_get_extensions( const char **out_exts, char ***out_exts_i) {
#if defined(GL_ES_VERSION_3_0) || defined(GL_VERSION_3_0)
    if (glad_glGetStringi != NULL && glad_glGetIntegerv != NULL) {
        unsigned int index = 0;
        unsigned int num_exts_i = 0;
        char **exts_i = NULL;
        glad_glGetIntegerv(GL_NUM_EXTENSIONS, (int*) &num_exts_i);
        exts_i = (char **) malloc((num_exts_i + 1) * (sizeof *exts_i));
        if (exts_i == NULL) {
            return 0;
        }
        for(index = 0; index < num_exts_i; index++) {
            const char *gl_str_tmp = (const char*) glad_glGetStringi(GL_EXTENSIONS, index);
            size_t len = strlen(gl_str_tmp) + 1;

            char *local_str = (char*) malloc(len * sizeof(char));
            if(local_str == NULL) {
                exts_i[index] = NULL;
                glad_gl_free_extensions(exts_i);
                return 0;
            }

            memcpy(local_str, gl_str_tmp, len * sizeof(char));
            exts_i[index] = local_str;
        }
        exts_i[index] = NULL;

        *out_exts_i = exts_i;

        return 1;
    }
#else
    GLAD_UNUSED(out_exts_i);
#endif
    if (glad_glGetString == NULL) {
        return 0;
    }
    *out_exts = (const char *)glad_glGetString(GL_EXTENSIONS);
    return 1;
}
static int glad_gl_has_extension(const char *exts, char **exts_i, const char *ext) {
    if(exts_i) {
        unsigned int index;
        for(index = 0; exts_i[index]; index++) {
            const char *e = exts_i[index];
            if(strcmp(e, ext) == 0) {
                return 1;
            }
        }
    } else {
        const char *extensions;
        const char *loc;
        const char *terminator;
        extensions = exts;
        if(extensions == NULL || ext == NULL) {
            return 0;
        }
        while(1) {
            loc = strstr(extensions, ext);
            if(loc == NULL) {
                return 0;
            }
            terminator = loc + strlen(ext);
            if((loc == extensions || *(loc - 1) == ' ') &&
                (*terminator == ' ' || *terminator == '\0')) {
                return 1;
            }
            extensions = terminator;
        }
    }
    return 0;
}

static GLADapiproc glad_gl_get_proc_from_userptr(void *userptr, const char* name) {
    return (GLAD_GNUC_EXTENSION (GLADapiproc (*)(const char *name)) userptr)(name);
}

static int glad_gl_find_extensions_gl(void) {
    const char *exts = NULL;
    char **exts_i = NULL;
    if (!glad_gl_get_extensions(&exts, &exts_i)) return 0;

    GLAD_UNUSED(glad_gl_has_extension);

    glad_gl_free_extensions(exts_i);

    return 1;
}

static int glad_gl_find_core_gl(void) {
    int i;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        "OpenGL SC ",
        NULL
    };
    int major = 0;
    int minor = 0;
    version = (const char*) glad_glGetString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    GLAD_GL_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
    GLAD_GL_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
    GLAD_GL_VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
    GLAD_GL_VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;
    GLAD_GL_VERSION_1_4 = (major == 1 && minor >= 4) || major > 1;
    GLAD_GL_VERSION_1_5 = (major == 1 && minor >= 5) || major > 1;
    GLAD_GL_VERSION_2_0 = (major == 2 && minor >= 0) || major > 2;
    GLAD_GL_VERSION_2_1 = (major == 2 && minor >= 1) || major > 2;
    GLAD_GL_VERSION_3_0 = (major == 3 && minor >= 0) || major > 3;
    GLAD_GL_VERSION_3_1 = (major == 3 && minor >= 1) || major > 3;
    GLAD_GL_VERSION_3_2 = (major == 3 && minor >= 2) || major > 3;
    GLAD_GL_VERSION_3_3 = (major == 3 && minor >= 3) || major > 3;

    return GLAD_MAKE_VERSION(major, minor);
}

int gladLoadGLUserPtr( GLADuserptrloadfunc load, void *userptr) {
    int version;

    glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    if(glad_glGetString == NULL) return 0;
    version = glad_gl_find_core_gl();

    glad_gl_load_GL_VERSION_1_0(load, userptr);
    glad_gl_load_GL_VERSION_1_1(load, userptr);
    glad_gl_load_GL_VERSION_1_2(load, userptr);
    glad_gl_load_GL_VERSION_1_3(load, userptr);
    glad_gl_load_GL_VERSION_1_4(load, userptr);
    glad_gl_load_GL_VERSION_1_5(load, userptr);
    glad_gl_load_GL_VERSION_2_0(load, userptr);
    glad_gl_load_GL_VERSION_2_1(load, userptr);
    glad_gl_load_GL_VERSION_3_0(load, userptr);
    glad_gl_load_GL_VERSION_3_1(load, userptr);
    glad_gl_load_GL_VERSION_3_2(load, userptr);
    glad_gl_load_GL_VERSION_3_3(load, userptr);

    if (!glad_gl_find_extensions_gl()) return 0;



    return version;
}


int gladLoadGL( GLADloadfunc load) {
    return gladLoadGLUserPtr( glad_gl_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}

; End of untranslated
